{"version":3,"sources":["assets/logo.png","components/card/Card.js","components/input/Button.js","components/main/List.js","redux/actions/setActions.js","components/input/Search.js","components/nav/Navigation.js","components/nav/OptionItem.js","components/nav/Option.js","data/Sort.js","components/nav/options.js","App.js","serviceWorker.js","redux/reducers/index.js","index.js"],"names":["module","exports","Card","props","React","useState","load","updateLoading","img","error","rend","rendElement","seconds","setSeconds","useEffect","interval","setInterval","imagesrc","clearInterval","location","useLocation","className","to","pathname","code","state","background","name","alt","onLoad","onError","src","icon","faSpinner","spin","size","style","color","loadColor","faExclamationCircle","Button","onClick","handleClick","bind","this","text","connect","displayedSet","itemLimit","setLimit","sorted","dispatch","changeLimit","type","cardEle","cards","setCards","setLoad","setError","sortObject","sortedList","p","toggle","points","filter","crd","console","log","val","includes","toLowerCase","toUpperCase","fetch","then","response","json","data","catch","length","slice","map","idx","key","button","setName","setText","placeholder","onChange","event","target","value","options","toggleOptions","clearOptions","Logo","faSearch","faTimes","setSort","prop","shower","handleSort","toggleReturn","isNaN","charAt","substring","Option","drop","toggleDrop","opt","values","op","faChevronDown","faChevronUp","Sort","sets","itm","push","returnSets","show","srt","App","Boolean","window","hostname","match","initState","rarity_name","affiliation_code","type_code","faction_code","set_name","health","cost","rootReducer","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92110afc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.faa1ee06.png\";","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faSpinner, faExclamationCircle} from '@fortawesome/free-solid-svg-icons';\nimport { useLocation } from \"react-router-dom\";\nfunction Card(props) {\n\n    const [load, updateLoading] = React.useState(\"loading\");\n    const [rend, rendElement] = React.useState({\n        img:false,\n        load:true,\n        error:false\n    });\n    const [seconds, setSeconds] = React.useState(0);\n\n\n    React.useEffect(() => {\n        let interval = null;\n\n            interval = setInterval(() => {\n                setSeconds(seconds => seconds + 1);\n                if (load) {\n                    if(props.imagesrc===null){\n                        rendElement({\n                            img:false,\n                            load:false,\n                            error:true\n                        });\n                    }else{\n                        rendElement({\n                            img:true,\n                            load:false,\n                            error:false\n                        });\n                    }\n\n                } else {\n                    if(seconds>3){\n                        rendElement({\n                            img:false,\n                            load:false,\n                            error:true\n                        });\n                    }else{\n                        rendElement({\n                            img:false,\n                            load:true,\n                            error:false\n                        });\n                    }\n                }\n            }, 1000);\n\n        return () => clearInterval(interval);\n    }, [seconds]);\n\n    const handleImageLoad = () => {\n        updateLoading(true)\n    };\n\n    const handleImageError = () => {\n        updateLoading(false)\n    };\n\n    let location = useLocation();\n\n    return (\n        <Link className={\"card\"} to={{pathname:\"/\" + props.code, state:{background:location}}}>\n            <h1>{props.name}</h1>\n            <div className={\"cardWrapper\"}>\n                {rend.img && <img alt={props.name} onLoad={handleImageLoad} onError={handleImageError} src={props.imagesrc}/>}\n                <div>\n                    {rend.load&&<FontAwesomeIcon icon={faSpinner} spin size={\"lg\"} style={{color:props.loadColor}}/>}\n                    {rend.error&&<FontAwesomeIcon icon={faExclamationCircle} style={{color:\"red\"}} size={\"6x\"}/>}\n                </div>\n            </div>\n\n\n        </Link>\n    )\n}\n\nexport default Card;","import React from 'react';\n\nfunction Button(props){\n\n    return (\n        <div className={\"button\"} onClick={props.handleClick.bind(this)}>\n            {props.text}\n        </div>\n    )\n}\n\nexport default Button;","import React from 'react';\nimport {changeLimit} from \"../../redux/actions/setActions\";\nimport Card from '../card/Card';\nimport {connect} from 'react-redux';\nimport Button from '../input/Button';\n\nfunction List(props) {\n\n    const [cards, setCards] = React.useState([]);\n    const [load, setLoad] = React.useState(true);\n    const [error, setError] = React.useState(false);\n\n    React.useEffect(() => {\n\n        function handleStatusChange(status) {\n            setCards(status)\n        }\n\n        fetch(\"https://swdestinydb.com/api/public/cards/\")\n            .then(response => {\n                return response.json();\n            })\n            .then((data) => {\n                console.log(data);\n                setLoad(false);\n                handleStatusChange(data);\n            }).catch(function () {\n                setError(true);\n            })\n\n    }, [cards, load]);\n\n\n    function sortObject() {\n\n        let sortedList = cards;\n\n        for (let p in props.sorted) {\n            if (props.sorted[p].toggle) {\n\n                if (props.sorted.points.toggle) {\n                    sortedList = sortedList.filter(crd => {\n                        console.log(crd, props.sorted[p].val);\n\n                        if (crd.points != null) {\n                            return crd.points.includes(props.sorted[p].val)\n                        } else {\n                            return;\n                        }\n                    });\n\n                } else {\n                    sortedList = sortedList.filter(crd => {\n\n                        return crd[p] === props.sorted[p].val\n\n                    });\n                }\n\n\n            }\n        }\n\n\n        if (props.name !== '') {\n            sortedList = sortedList.filter(crd => {\n                if (crd.name.includes(props.name)) {\n                    return true\n                } else if (crd.name.toLowerCase().includes(props.name)) {\n                    return true\n                } else if (crd.name.toUpperCase().includes(props.name)) {\n                    return true\n                } else {\n                    return false\n                }\n            });\n        }\n\n\n        return sortedList\n    }\n\n    let cardEle;\n\n    if (sortObject().length !== 0) {\n        cardEle = sortObject().slice(0, props.itemLimit).map((crd, idx) =>\n\n\n            <Card key={idx} name={crd.name} imagesrc={crd.imagesrc} code={crd.code} loadColor={\"#343740\"}/>\n        );\n    } else if(!load&&!error) {\n        cardEle = <h1>No cards in search</h1>;\n    }else if(load&&!error){\n        cardEle = <h1>Fetching Cards...</h1>;\n    }else if(load&&error){\n        cardEle = <h1>Loading Cards failed. Refresh page...</h1>;\n    }\n\n\n    const button = () => {\n        if (props.itemLimit < sortObject().length && sortObject().length > 10) {\n            return <Button handleClick={() => props.changeLimit()} text={\"Load More\"}/>\n        }\n    };\n\n\n    return (\n\n        <div className={\"list\"}>\n            <div className={\"wrapper\"}>\n                {cardEle}\n            </div>\n            {button()}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        displayedSet: state.displayedSet,\n        itemLimit: state.itemLimit,\n        setLimit: state.setLimit,\n        sorted: state.sorted,\n        name: state.name\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        changeLimit: () => {\n            dispatch(changeLimit())\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\n","export const changeLimit = () => {\n    return {\n        type: 'INCREASE_LIMIT'\n    }\n};\n\nexport const setName = (name) => {\n    return {\n        type: 'SET_NAME',\n        name:name\n    }\n};\n\nexport const setSort = (prop, toggle, val) => {\n    return {\n        type: 'SET_SORT',\n        prop: prop,\n        toggle: toggle,\n        val: val\n    }\n};\n\nexport const toggleOptions = () => {\n    return {\n        type: 'TOGGLE_OPTIONS'\n    }\n};\n\nexport const clearOptions = () =>{\n    return {\n        type: 'CLEAR_OPTIONS'\n    }\n};","import React from 'react';\nimport {setName} from \"../../redux/actions/setActions\";\nimport {connect} from 'react-redux';\n\nfunction Search(props) {\n\n    const [text, setText] = React.useState(\"\");\n\n\n    const handleChange = event => {\n        setText(event.target.value);\n        props.setName(text);\n    };\n\n\n\n\n    return (\n        <input placeholder={\"Search for a Card by Name...\"} onChange={handleChange} className={\"search\"}/>\n\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        displayedSet: state.displayedSet,\n        itemLimit: state.itemLimit,\n        setLimit: state.setLimit,\n        sorted:state.sorted\n    }\n};\n\nconst mapDispatchToProps = (dispatch)=>{\n    return {\n        setName: (name) => {\n            dispatch(setName(name))\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\n","import React from 'react';\nimport {toggleOptions, clearOptions} from \"../../redux/actions/setActions\";\nimport {connect} from 'react-redux';\n\nimport Search from '../input/Search';\nimport Logo from '../../assets/logo.png';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faSearch, faTimes} from '@fortawesome/free-solid-svg-icons';\n\nfunction Nav(props) {\n\n    return (\n\n\n        <nav>\n            <div className={\"logo\"} onClick={()=>props.clearOptions()}><img alt={\"logo\"} src={Logo}/></div>\n            <Search/>\n            <div className={\"ham\"} onClick={() => props.toggleOptions()}>\n\n                {!props.options && <FontAwesomeIcon icon={faSearch} size=\"2x\"/>}\n                {props.options && <FontAwesomeIcon icon={faTimes} size=\"2x\"/>}\n            </div>\n\n        </nav>\n\n\n    );\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        options: state.options\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        toggleOptions: () => {\n            dispatch(toggleOptions())\n        },\n        clearOptions:()=>{\n            dispatch(clearOptions())\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Nav);\n","import React from 'react';\nimport {setSort} from \"../../redux/actions/setActions\";\nimport {connect} from \"react-redux\";\n\nfunction OptionItem(props) {\n\n    let shower;\n\n    const toggleReturn = (prop, val) => {\n        return !(props.sorted[prop].toggle && props.sorted[prop].val === val);\n    };\n\n    const handleSort = (prop, val) => {\n        props.setSort(prop, toggleReturn(prop, val), val)\n    };\n\n    if (props.sorted[props.type].val === props.value && props.sorted[props.type].toggle) {\n        shower = {\n            \"backgroundColor\": \"#343740\"\n        }\n    }\n\n    const numberCheck = () => {\n        if (isNaN(props.value)) {\n            return props.value.charAt(0).toUpperCase() + props.value.substring(1)\n        } else {\n            return props.value\n        }\n    };\n\n\n    return (\n        <div className={\"item\"} style={shower} onClick={() => handleSort(props.type, props.value)}>{numberCheck()}</div>\n    );\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        sorted: state.sorted\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setSort: (prop, toggle, val) => {\n            dispatch(setSort(prop, toggle, val))\n        }\n    }\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OptionItem);","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faChevronUp, faChevronDown} from '@fortawesome/free-solid-svg-icons';\nimport OptionItem from './OptionItem';\n\nfunction Option (props){\n    const [drop, toggleDrop] = React.useState(false);\n\n    let shower;\n\n    if(drop){\n        shower={\n            \"minHeight\":\"\"+(25*props.opt.values.length)+\"px\",\n            \"maxHeight\":\"\"+(25*props.opt.values.length)+\"px\"\n        }\n    }else{\n        shower={\n            \"minHeight\":\"0px\",\n            \"maxHeight\":\"0px\"\n        }\n    }\n\n    let values = props.opt.values.map((op, idx)=>\n        <OptionItem key={idx} type={props.opt.type} value={op}/>\n    );\n\n    return(\n        <div className={\"option\"}>\n            <h3 className={\"optHead\"} onClick={()=>toggleDrop(!drop)}>\n                {props.opt.name}\n                {!drop && <FontAwesomeIcon icon={faChevronDown} />}\n                {drop && <FontAwesomeIcon icon={faChevronUp} />}\n            </h3>\n            <div className={\"listOpt\"} style={shower}>\n                {values}\n            </div>\n        </div>\n    );\n\n}\n\nexport default Option;","function returnSets(){\n    let sets=[];\n\n    fetch(\"https://swdestinydb.com/api/public/sets/\")\n        .then(response => {\n            return response.json();\n        })\n        .then((data) => {\n            data.map((itm)=>{\n                sets.push(itm.name);\n            });\n            return sets;\n\n        }).catch(function () {\n        console.log(\"error loading sets\");\n    });\n\n    return sets;\n}\n\nexport const Sort = [\n\n    {\n      name: \"Affiliations\",\n      type: \"affiliation_code\",\n        values:[\"hero\", \"villain\", \"neutral\"]\n    },\n    {\n        name: \"Colors\",\n        type: \"faction_code\",\n        values:[\"red\", \"blue\", \"yellow\", \"gray\"]\n    },\n    {\n        name: \"Rarity\",\n        type: \"rarity_name\",\n        values:[\"Starter\", \"Common\", \"Uncommon\", \"Rare\", \"Legendary\"]\n    },\n    {\n        name:\"Health\",\n        type:\"health\",\n        values:[4,5,6,7,8,9,10,11,12,13,15]\n    },\n    {\n        name:\"Cost\",\n        type:\"cost\",\n        values:[0,1,2,3,4,5,6]\n    },\n    {\n        name:\"Set\",\n        type:\"set_name\",\n        values:returnSets()},\n    {\n        name:\"Points\",\n        type:\"points\",\n        values:[\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\"]\n    },\n    {\n        name:\"Type\",\n        type:\"type_code\",\n        values:[\"character\", \"upgrade\", \"support\", \"event\", \"downgrade\", \"plot\"]\n    }\n\n];","import React from 'react';\nimport {clearOptions} from \"../../redux/actions/setActions\";\nimport {connect} from 'react-redux';\nimport Option from './Option';\nimport {Sort} from \"../../data/Sort\";\nimport Button from '../input/Button';\n\nfunction Options(props){\n\n    let show;\n\n    if(props.options){\n        show={\n            \"right\":\"0\"\n        }\n    }else{\n        show={\n            \"right\":\"-100%\"\n        }\n    }\n\n    let options = Sort.map((srt, idx)=>\n        <Option key={idx} opt={srt}/>\n    );\n\n\n    return (\n        <div className={\"options\"} style={show}>\n            <h1>Sort Cards</h1>\n            <div className={\"wrapper\"}>\n                {options}\n            </div>\n            <Button handleClick={() => props.clearOptions()} text={\"Clear Search Query\"}/>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        options:state.options\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n\n        clearOptions:()=>{\n            dispatch(clearOptions())\n        }\n    }\n};\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Options);\n","import React from 'react';\nimport './less/style.css';\nimport List from './components/main/List';\nimport CardPage from './components/card/CardPage'\nimport Nav from './components/nav/Navigation';\nimport Options from './components/nav/options';\n\nimport {\n    Switch,\n    Route,\n    useLocation\n} from \"react-router-dom\";\n\nfunction App() {\n\n    let location = useLocation();\n    let background = location.state && location.state.background;\n\n\n\n\n    return (\n\n            <div className=\"App\">\n                <Nav/>\n                <Options/>\n                <div className={\"mainWrapper\"}>\n                <List/>\n\n                    {/*{background && <Route path={\"/:id\"} children={<CardPage/>}/>}*/}\n                </div>\n            </div>\n    );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n\nconst initState = {\n    itemLimit: 10,\n    sorted:{\n        rarity_name: {toggle: false, val: \"Starter\"},\n        affiliation_code: {toggle: false, val: \"villain\"},\n        type_code: {toggle: false, val: \"character\"},\n        faction_code: {toggle: false, val: \"red\"},\n        set_name:{toggle:false,val:\"Way of the Force\"},\n        health: {toggle: false, val: 10},\n        cost: {toggle: false, val: 0},\n        points: {toggle: false, val: \"7\"}\n    },\n    name: \"\",\n    options:false\n\n\n};\n\nconst rootReducer = (state = initState, action) => {\n\n    if (action.type === 'INCREASE_LIMIT') {\n\n        let val = state.itemLimit;\n\n        val = val + 10;\n\n\n        return {\n            ...state,\n            itemLimit: val\n        }\n    }\n\n    if (action.type === 'SET_SORT') {\n        return {\n            ...state,\n            itemLimit:10,\n            sorted:{\n                ...state.sorted,\n                [action.prop]: {\n                    toggle: action.toggle,\n                    val: action.val\n                }\n            }\n\n        }\n\n    }\n\n    if(action.type === 'SET_NAME'){\n        return{\n            ...state,\n            name:action.name\n        }\n    }\n\n    if(action.type === 'TOGGLE_OPTIONS'){\n\n        return{\n            ...state,\n            options:!state.options\n        }\n    }\n\n    if(action.type === 'CLEAR_OPTIONS'){\n\n        return{\n            ...state,\n            itemLimit: 10,\n            sorted:{\n                rarity_name: {toggle: false, val: \"Starter\"},\n                affiliation_code: {toggle: false, val: \"villain\"},\n                type_code: {toggle: false, val: \"character\"},\n                faction_code: {toggle: false, val: \"red\"},\n                set_name:{toggle:false,val:\"Way of the Force\"},\n                health: {toggle: false, val: 10},\n                cost: {toggle: false, val: 0},\n                points: {toggle: false, val: \"7\"}\n            },\n            name: \"\",\n            options:false\n        }\n    }\n\n\n    return state;\n};\n\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {createStore} from 'redux';\nimport {Provider} from \"react-redux\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from \"./redux/reducers\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n\n    <Provider store={store}>\n        <Router>\n            <App/>\n        </Router>\n    </Provider>,\n\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
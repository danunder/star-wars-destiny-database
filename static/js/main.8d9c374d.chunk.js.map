{"version":3,"sources":["assets/logo.png","components/card/Card.js","components/input/Button.js","components/main/List.js","redux/actions/setActions.js","components/card/CardInfo.js","components/card/CardPage.js","components/input/Search.js","components/nav/Navigation.js","components/nav/OptionItem.js","components/nav/Option.js","data/Sort.js","components/nav/options.js","App.js","serviceWorker.js","redux/reducers/index.js","index.js"],"names":["module","exports","Card","props","React","useState","load","updateLoading","img","error","rend","rendElement","seconds","setSeconds","useEffect","interval","setInterval","imagesrc","clearInterval","className","name","alt","onLoad","onError","src","icon","faSpinner","spin","size","style","color","loadColor","faExclamationCircle","Button","onClick","handleClick","bind","this","text","connect","state","displayedSet","itemLimit","setLimit","sorted","dispatch","changeLimit","type","cardEle","cards","setCards","setLoad","setError","sortObject","sortedList","p","toggle","points","filter","crd","includes","val","toLowerCase","toUpperCase","fetch","then","response","json","data","catch","length","slice","map","idx","to","code","key","button","CardInfo","subtypes","sides","format","restricted","balance","legal","rst","setRst","undefined","sb","sd","abortController","AbortController","signal","unsubscribe","formats","fm","sets","set_code","push","console","log","abort","is_unique","health","cost","type_name","has_errata","flavor","affiliation_name","rarity_name","set_name","position","CardPage","card","setCard","status","cardMain","match","params","id","ex","setName","setText","placeholder","onChange","event","target","value","options","toggleOptions","clearOptions","Logo","faSearch","faTimes","setSort","prop","shower","handleSort","toggleReturn","isNaN","charAt","substring","Option","drop","toggleDrop","opt","values","op","faChevronDown","faChevronUp","Sort","itm","returnSets","show","srt","App","path","component","List","Boolean","window","location","hostname","initState","affiliation_code","type_code","faction_code","rootReducer","action","store","createStore","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d9c374d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.faa1ee06.png\";","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faSpinner, faExclamationCircle} from '@fortawesome/free-solid-svg-icons';\nfunction Card(props) {\n\n    const [load, updateLoading] = React.useState(\"loading\");\n    const [rend, rendElement] = React.useState({\n        img:false,\n        load:true,\n        error:false\n    });\n    const [seconds, setSeconds] = React.useState(0);\n\n\n    React.useEffect(() => {\n        let interval = null;\n\n            interval = setInterval(() => {\n                setSeconds(seconds => seconds + 1);\n                if (load) {\n                    if(props.imagesrc===null){\n                        rendElement({\n                            img:false,\n                            load:false,\n                            error:true\n                        });\n                    }else{\n                        rendElement({\n                            img:true,\n                            load:false,\n                            error:false\n                        });\n                    }\n\n                } else {\n                    if(seconds>3){\n                        rendElement({\n                            img:false,\n                            load:false,\n                            error:true\n                        });\n                    }else{\n                        rendElement({\n                            img:false,\n                            load:true,\n                            error:false\n                        });\n                    }\n                }\n            }, 1000);\n\n        return () => clearInterval(interval);\n    }, [seconds, load, props.imagesrc]);\n\n    const handleImageLoad = () => {\n        updateLoading(true)\n    };\n\n    const handleImageError = () => {\n        updateLoading(false)\n    };\n\n    return (\n        <div className={\"card\"} >\n            <h1>{props.name}</h1>\n            <div className={\"cardWrapper\"}>\n                {rend.img && <img alt={props.name} onLoad={handleImageLoad} onError={handleImageError} src={props.imagesrc}/>}\n                <div>\n                    {rend.load&&<FontAwesomeIcon icon={faSpinner} spin size={\"lg\"} style={{color:props.loadColor}}/>}\n                    {rend.error&&<FontAwesomeIcon icon={faExclamationCircle} style={{color:\"red\"}} size={\"6x\"}/>}\n                </div>\n            </div>\n\n\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\n\nfunction Button(props){\n\n    return (\n        <div className={\"button\"} onClick={props.handleClick.bind(this)}>\n            {props.text}\n        </div>\n    )\n}\n\nexport default Button;","import React from 'react';\nimport {changeLimit} from \"../../redux/actions/setActions\";\nimport Card from '../card/Card';\nimport {connect} from 'react-redux';\nimport Button from '../input/Button';\nimport {Link} from 'react-router-dom';\n\nfunction List(props) {\n\n    const [cards, setCards] = React.useState([]);\n    const [load, setLoad] = React.useState(true);\n    const [error, setError] = React.useState(false);\n\n    React.useEffect(() => {\n\n        function handleStatusChange(status) {\n            setCards(status)\n        }\n\n        fetch(\"https://swdestinydb.com/api/public/cards/\")\n            .then(response => {\n                return response.json();\n            })\n            .then((data) => {\n                setLoad(false);\n                handleStatusChange(data);\n            }).catch(function () {\n            setError(true);\n        })\n\n    }, [cards, load]);\n\n\n    function sortObject() {\n\n        let sortedList = cards;\n\n        for (let p in props.sorted) {\n            if (props.sorted[p].toggle) {\n\n                if (props.sorted.points.toggle) {\n                    sortedList = sortedList.filter(crd => {\n                        return crd.points.includes(props.sorted[p].val) && crd.points != null\n                    });\n\n                } else {\n                    sortedList = sortedList.filter(crd => {\n\n                        return crd[p] === props.sorted[p].val\n\n                    });\n                }\n\n\n            }\n        }\n\n\n        if (props.name !== '') {\n            sortedList = sortedList.filter(crd => {\n                if (crd.name.includes(props.name)) {\n                    return true\n                } else if (crd.name.toLowerCase().includes(props.name)) {\n                    return true\n                } else if (crd.name.toUpperCase().includes(props.name)) {\n                    return true\n                } else {\n                    return false\n                }\n            });\n        }\n\n\n        return sortedList\n    }\n\n    let cardEle;\n\n    if (sortObject().length !== 0) {\n        cardEle = sortObject().slice(0, props.itemLimit).map((crd, idx) =>\n\n\n            <Link to={\"/\" + crd.code} key={idx}><Card name={crd.name} imagesrc={crd.imagesrc} code={crd.code}\n                                                      loadColor={\"#343740\"}/></Link>\n        );\n    } else if (!load && !error) {\n        cardEle = <h1>No cards in search</h1>;\n    } else if (load && !error) {\n        cardEle = <h1>Fetching Cards...</h1>;\n    } else if (load && error) {\n        cardEle = <h1>Loading Cards failed. Refresh page...</h1>;\n    }\n\n\n    const button = () => {\n        if (props.itemLimit < sortObject().length && sortObject().length > 10) {\n            return <Button handleClick={() => props.changeLimit()} text={\"Load More\"}/>\n        }\n    };\n\n\n    return (\n\n        <div className={\"list\"}>\n            <div className={\"wrapper\"}>\n                {cardEle}\n            </div>\n            {button()}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        displayedSet: state.displayedSet,\n        itemLimit: state.itemLimit,\n        setLimit: state.setLimit,\n        sorted: state.sorted,\n        name: state.name\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        changeLimit: () => {\n            dispatch(changeLimit())\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\n","export const changeLimit = () => {\n    return {\n        type: 'INCREASE_LIMIT'\n    }\n};\n\nexport const setName = (name) => {\n    return {\n        type: 'SET_NAME',\n        name:name\n    }\n};\n\nexport const setSort = (prop, toggle, val) => {\n    return {\n        type: 'SET_SORT',\n        prop: prop,\n        toggle: toggle,\n        val: val\n    }\n};\n\nexport const toggleOptions = () => {\n    return {\n        type: 'TOGGLE_OPTIONS'\n    }\n};\n\nexport const clearOptions = () =>{\n    return {\n        type: 'CLEAR_OPTIONS'\n    }\n};","import React from 'react';\n\nfunction CardInfo(props){\n\n    const [rst, setRst] = React.useState([\n\n       {\n           format:\"trilogy\",\n           restricted:false,\n            balance:\"--\",\n            legal:false\n        },\n        {\n            format:\"standard\",\n            restricted:false,\n            balance:\"--\",\n            legal:false\n        },\n        {\n            format:\"infinite\",\n            restricted:false,\n            balance:\"--\",\n            legal:true\n        }\n    ]);\n    const [load, setLoad]= React.useState(false);\n\n\n    let subtypes;\n    let sides;\n\n    if(props.crd.subtypes!==undefined){\n       subtypes =props.crd.subtypes.map((sb, idx)=>\n           <h3 key={idx}>{sb.name}{idx!==(props.crd.subtypes.length-1)&&\"-\"}</h3>\n       );\n    }\n\n    if(props.crd.sides!==undefined){\n        sides = props.crd.sides.map((sd, idx)=>\n            <div key={idx} className={\"side\"}>{sd}</div>\n        );\n    }\n\n    React.useEffect(()=>{\n\n        const abortController = new AbortController();\n        const signal  =abortController.signal;\n\n\n        function handleStatusChange(status) {\n            setRst(status);\n        }\n\n        const unsubscribe = ()=>{\n\n            fetch(\"https://swdestinydb.com/api/public/formats/\", {signal:signal})\n                .then(response => {\n                    return response.json();\n                })\n                .then((data) => {\n                    let formats=[];\n\n                     data.map((fm)=>{\n\n                        let format ={\n                            name:fm.name,\n                            restricted:false,\n                            balance:\"--\",\n                            legal:false\n                        };\n\n                        if(props.code in fm.data.balance){\n                            format.balance = fm.data.balance[props.code];\n                        }\n\n                        if(fm.data.restricted.includes(props.code)){\n                            format.restricted=true;\n                        }\n\n                        if(fm.data.sets.includes(props.crd.set_code)){\n                            format.legal=true;\n                        }\n\n\n                        formats.push(format);\n\n\n\n                    });\n\n                    handleStatusChange(formats);\n                }).catch(()=> console.log())\n        };\n\n        unsubscribe();\n\n\n        return function cleanup(){\n            unsubscribe();\n            abortController.abort();\n        };\n    },[]);\n\n    let formats = rst.map((fm, idx)=>\n    <div key={idx}>\n        <h1>{fm.name}</h1>\n        <h3>{fm.restricted ? \"Restricted\":null}</h3>\n        <h3>{fm.balance}</h3>\n        <h6>Legal: {fm.legal ? \"Playable\":\"Unplayable\"}</h6>\n    </div>\n    );\n\n\n    return(\n        <div className={\"cardInfo\"}>\n            <h1>{props.crd.is_unique&&\"◆ \"}{props.crd.name}</h1>\n            <h2>{props.crd.health&& \"Health:\"}{props.crd.health}</h2>\n            <h2>{props.crd.cost&& \"Cost:\"}{props.crd.cost}</h2>\n            <h2>{props.crd.points&& \"Points:\"}{props.crd.points}</h2>\n            <h2>{props.crd.type_name}</h2>\n            <div className={\"subtypes\"}>{subtypes}</div>\n            <div className={\"sides\"}>{sides}</div>\n            <h3>{props.crd.has_errata&&\"This card has an errata\"}</h3>\n            {formats}\n            <p>{props.crd.text}</p>\n\n            <i>{props.crd.flavor}</i>\n\n            <div>{props.crd.affiliation_name}</div>\n            <div>{props.crd.rarity_name}</div>\n\n            <div>{props.crd.set_name}: {props.crd.position}</div>\n\n\n        </div>\n    )\n}\n\nexport default CardInfo","import React from 'react';\nimport {\n     Link\n} from \"react-router-dom\";\nimport Card from './Card';\nimport CardInfo from './CardInfo';\n\nfunction CardPage(props){\n\n    const [card,setCard] = React.useState(\"\");\n\n\n    React.useEffect(()=>{\n\n        const abortController = new AbortController();\n        const signal  =abortController.signal;\n\n\n        function handleStatusChange(status) {\n            setCard(status)\n        }\n\n        const unsubscribe = ()=>{\n\n\n            fetch(\"https://swdestinydb.com/api/public/cards/\", {signal:signal})\n                .then(response => {\n                    return response.json();\n                })\n                .then((data) => {\n\n                    let cardMain = data.filter(crd=>{\n                        return props.match.params.id===crd.code;\n                    });\n\n                    handleStatusChange(cardMain[0]);\n                }).catch(ex=> console.log())\n        };\n\n        unsubscribe();\n\n\n        return function cleanup(){\n            unsubscribe();\n            abortController.abort();\n        };\n\n    },[props.match.params.id]);\n\n    const code = card.code;\n\n    return (\n        <Link className={props.match.params.id ? \"cardPageWrapper\" : undefined} to={\"/\"}>\n            <Card  name={card.name} imagesrc={card.imagesrc} code={card.code} loadColor={\"white\"}/>\n            {code&&<CardInfo crd={card} code={code}/>}\n        </Link>\n    )\n}\n\nexport default CardPage;","import React from 'react';\nimport {setName} from \"../../redux/actions/setActions\";\nimport {connect} from 'react-redux';\n\nfunction Search(props) {\n\n    const [text, setText] = React.useState(\"\");\n\n\n    const handleChange = event => {\n        setText(event.target.value);\n        props.setName(text);\n    };\n\n\n\n\n    return (\n        <input placeholder={\"Search for a Card by Name...\"} onChange={handleChange} className={\"search\"}/>\n\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        displayedSet: state.displayedSet,\n        itemLimit: state.itemLimit,\n        setLimit: state.setLimit,\n        sorted:state.sorted\n    }\n};\n\nconst mapDispatchToProps = (dispatch)=>{\n    return {\n        setName: (name) => {\n            dispatch(setName(name))\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\n","import React from 'react';\nimport {toggleOptions, clearOptions} from \"../../redux/actions/setActions\";\nimport {connect} from 'react-redux';\n\nimport Search from '../input/Search';\nimport Logo from '../../assets/logo.png';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faSearch, faTimes} from '@fortawesome/free-solid-svg-icons';\n\nfunction Nav(props) {\n\n    return (\n\n\n        <nav>\n            <div className={\"logo\"} onClick={()=>props.clearOptions()}><img alt={\"logo\"} src={Logo}/></div>\n            <Search/>\n            <div className={\"ham\"} onClick={() => props.toggleOptions()}>\n\n                {!props.options && <FontAwesomeIcon icon={faSearch} size=\"2x\"/>}\n                {props.options && <FontAwesomeIcon icon={faTimes} size=\"2x\"/>}\n            </div>\n\n        </nav>\n\n\n    );\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        options: state.options\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        toggleOptions: () => {\n            dispatch(toggleOptions())\n        },\n        clearOptions:()=>{\n            dispatch(clearOptions())\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Nav);\n","import React from 'react';\nimport {setSort} from \"../../redux/actions/setActions\";\nimport {connect} from \"react-redux\";\n\nfunction OptionItem(props) {\n\n    let shower;\n\n    const toggleReturn = (prop, val) => {\n        return !(props.sorted[prop].toggle && props.sorted[prop].val === val);\n    };\n\n    const handleSort = (prop, val) => {\n        props.setSort(prop, toggleReturn(prop, val), val)\n    };\n\n    if (props.sorted[props.type].val === props.value && props.sorted[props.type].toggle) {\n        shower = {\n            \"backgroundColor\": \"#343740\"\n        }\n    }\n\n    const numberCheck = () => {\n        if (isNaN(props.value)) {\n            return props.value.charAt(0).toUpperCase() + props.value.substring(1)\n        } else {\n            return props.value\n        }\n    };\n\n\n    return (\n        <div className={\"item\"} style={shower} onClick={() => handleSort(props.type, props.value)}>{numberCheck()}</div>\n    );\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        sorted: state.sorted\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setSort: (prop, toggle, val) => {\n            dispatch(setSort(prop, toggle, val))\n        }\n    }\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OptionItem);","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faChevronUp, faChevronDown} from '@fortawesome/free-solid-svg-icons';\nimport OptionItem from './OptionItem';\n\nfunction Option (props){\n    const [drop, toggleDrop] = React.useState(false);\n\n    let shower;\n\n    if(drop){\n        shower={\n            \"minHeight\":\"\"+(25*props.opt.values.length)+\"px\",\n            \"maxHeight\":\"\"+(25*props.opt.values.length)+\"px\"\n        }\n    }else{\n        shower={\n            \"minHeight\":\"0px\",\n            \"maxHeight\":\"0px\"\n        }\n    }\n\n    let values = props.opt.values.map((op, idx)=>\n        <OptionItem key={idx} type={props.opt.type} value={op}/>\n    );\n\n    return(\n        <div className={\"option\"}>\n            <h3 className={\"optHead\"} onClick={()=>toggleDrop(!drop)}>\n                {props.opt.name}\n                {!drop && <FontAwesomeIcon icon={faChevronDown} />}\n                {drop && <FontAwesomeIcon icon={faChevronUp} />}\n            </h3>\n            <div className={\"listOpt\"} style={shower}>\n                {values}\n            </div>\n        </div>\n    );\n\n}\n\nexport default Option;","function returnSets(){\n    let sets=[];\n\n    fetch(\"https://swdestinydb.com/api/public/sets/\")\n        .then(response => {\n            return response.json();\n        })\n        .then((data) => {\n            data.map((itm)=>{\n                return sets.push(itm.name);\n            });\n            return sets;\n\n        }).catch(function () {\n        console.log(\"error loading sets\");\n    });\n\n    return sets;\n}\n\nexport const Sort = [\n\n    {\n      name: \"Affiliations\",\n      type: \"affiliation_code\",\n        values:[\"hero\", \"villain\", \"neutral\"]\n    },\n    {\n        name: \"Colors\",\n        type: \"faction_code\",\n        values:[\"red\", \"blue\", \"yellow\", \"gray\"]\n    },\n    {\n        name: \"Rarity\",\n        type: \"rarity_name\",\n        values:[\"Starter\", \"Common\", \"Uncommon\", \"Rare\", \"Legendary\"]\n    },\n    {\n        name:\"Health\",\n        type:\"health\",\n        values:[4,5,6,7,8,9,10,11,12,13,15]\n    },\n    {\n        name:\"Cost\",\n        type:\"cost\",\n        values:[0,1,2,3,4,5,6]\n    },\n    {\n        name:\"Set\",\n        type:\"set_name\",\n        values:returnSets()},\n    {\n        name:\"Points\",\n        type:\"points\",\n        values:[\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\"]\n    },\n    {\n        name:\"Type\",\n        type:\"type_code\",\n        values:[\"character\", \"upgrade\", \"support\", \"event\", \"downgrade\", \"plot\"]\n    }\n\n];","import React from 'react';\nimport {clearOptions} from \"../../redux/actions/setActions\";\nimport {connect} from 'react-redux';\nimport Option from './Option';\nimport {Sort} from \"../../data/Sort\";\nimport Button from '../input/Button';\n\nfunction Options(props){\n\n    let show;\n\n    if(props.options){\n        show={\n            \"right\":\"0\"\n        }\n    }else{\n        show={\n            \"right\":\"-100%\"\n        }\n    }\n\n    let options = Sort.map((srt, idx)=>\n        <Option key={idx} opt={srt}/>\n    );\n\n\n    return (\n        <div className={\"options\"} style={show}>\n            <h1>Sort Cards</h1>\n            <div className={\"wrapper\"}>\n                {options}\n            </div>\n            <Button handleClick={() => props.clearOptions()} text={\"Clear Search Query\"}/>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        options:state.options\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n\n        clearOptions:()=>{\n            dispatch(clearOptions())\n        }\n    }\n};\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Options);\n","import React from 'react';\nimport './less/style.css';\nimport List from './components/main/List';\nimport CardPage from './components/card/CardPage'\nimport Nav from './components/nav/Navigation';\nimport Options from './components/nav/options';\n\nimport {\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nfunction App() {\n\n\n\n\n    return (\n\n        <div className=\"App\">\n            <Nav/>\n            <Options/>\n            <div className={\"mainWrapper\"}>\n                <Switch>\n                    <Route path=\"/\" component={List}/>\n                </Switch>\n\n                <Route path={\"/:id\"} component={CardPage}/>\n            </div>\n        </div>\n    );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n\nconst initState = {\n    itemLimit: 10,\n    sorted:{\n        rarity_name: {toggle: false, val: \"Starter\"},\n        affiliation_code: {toggle: false, val: \"villain\"},\n        type_code: {toggle: false, val: \"character\"},\n        faction_code: {toggle: false, val: \"red\"},\n        set_name:{toggle:false,val:\"Way of the Force\"},\n        health: {toggle: false, val: 10},\n        cost: {toggle: false, val: 0},\n        points: {toggle: false, val: \"7\"}\n    },\n    name: \"\",\n    options:false\n\n\n};\n\nconst rootReducer = (state = initState, action) => {\n\n    if (action.type === 'INCREASE_LIMIT') {\n\n        let val = state.itemLimit;\n\n        val = val + 10;\n\n\n        return {\n            ...state,\n            itemLimit: val\n        }\n    }\n\n    if (action.type === 'SET_SORT') {\n        return {\n            ...state,\n            itemLimit:10,\n            sorted:{\n                ...state.sorted,\n                [action.prop]: {\n                    toggle: action.toggle,\n                    val: action.val\n                }\n            }\n\n        }\n\n    }\n\n    if(action.type === 'SET_NAME'){\n        return{\n            ...state,\n            name:action.name\n        }\n    }\n\n    if(action.type === 'TOGGLE_OPTIONS'){\n\n        return{\n            ...state,\n            options:!state.options\n        }\n    }\n\n    if(action.type === 'CLEAR_OPTIONS'){\n\n        return{\n            ...state,\n            itemLimit: 10,\n            sorted:{\n                rarity_name: {toggle: false, val: \"Starter\"},\n                affiliation_code: {toggle: false, val: \"villain\"},\n                type_code: {toggle: false, val: \"character\"},\n                faction_code: {toggle: false, val: \"red\"},\n                set_name:{toggle:false,val:\"Way of the Force\"},\n                health: {toggle: false, val: 10},\n                cost: {toggle: false, val: 0},\n                points: {toggle: false, val: \"7\"}\n            },\n            name: \"\",\n            options:false\n        }\n    }\n\n\n    return state;\n};\n\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {createStore} from 'redux';\nimport {Provider} from \"react-redux\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from \"./redux/reducers\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n\n    <Provider store={store}>\n        <Router basename={process.env.PUBLIC_URL}>\n            <App/>\n        </Router>\n    </Provider>,\n\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"ast":null,"code":"import _slicedToArray from \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/components/main/List.js\";\nimport React from 'react';\nimport { changeLimit } from \"../../redux/actions/setActions\";\nimport Card from '../card/Card';\nimport { connect } from 'react-redux';\nimport Button from '../input/Button';\nimport { Link } from 'react-router-dom';\n\nfunction List(props) {\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        cards = _React$useState2[0],\n        setCards = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        sort = _React$useState4[0],\n        setSort = _React$useState4[1];\n\n  const _React$useState5 = React.useState(true),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        load = _React$useState6[0],\n        setLoad = _React$useState6[1];\n\n  const _React$useState7 = React.useState(false),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        error = _React$useState8[0],\n        setError = _React$useState8[1];\n\n  React.useEffect(() => {\n    function handleStatusChange(status) {\n      setCards(status);\n    }\n\n    if (load) {\n      fetch(\"https://swdestinydb.com/api/public/cards/\").then(response => {\n        return response.json();\n      }).then(data => {\n        setLoad(false);\n        handleStatusChange(data);\n      }).catch(function () {\n        setError(true);\n      });\n    }\n\n    function sortObject() {\n      let sortedList = cards;\n\n      for (let p in props.sorted) {\n        if (props.sorted[p].toggle) {\n          if (p === \"points\") {\n            for (let i = 0; i < props.sorted.points.val.length; i++) {\n              console.log(props.sorted.points.val[i]);\n              sortedList = sortedList.filter(crd => {\n                let ret = false;\n\n                if (crd.points !== null) {\n                  for (let v = 0; v < crd.points.split(\"/\").length; v++) {\n                    if (crd.points.split(\"/\")[v].includes(props.sorted.points.val[i]) && props.sorted.points.val[i].length === crd.points.split(\"/\")[v].length) {\n                      ret = true;\n                    }\n                  }\n                }\n\n                return ret ? crd : null;\n              });\n            }\n          } else if (p === \"sides\") {\n            for (let i = 0; i < props.sorted.sides.val.length; i++) {\n              sortedList = sortedList.filter(crd => {\n                let ret = false;\n\n                if (crd.hasOwnProperty('sides')) {\n                  for (let v = 0; v < crd.sides.length; v++) {\n                    if (crd.sides[v].includes(props.sorted.sides.val[i])) {\n                      ret = true;\n                    }\n                  }\n                }\n\n                return ret ? crd : null;\n              });\n            }\n          } else {\n            sortedList = sortedList.filter(crd => {\n              return props.sorted[p].val.includes(crd[p]);\n            });\n          }\n        }\n      }\n\n      if (props.name !== '') {\n        sortedList = sortedList.filter(crd => {\n          if (crd.name.includes(props.name)) {\n            return true;\n          } else if (crd.name.toLowerCase().includes(props.name)) {\n            return true;\n          } else return crd.name.toUpperCase().includes(props.name);\n        });\n      }\n\n      setSort(sortedList);\n    }\n\n    sortObject();\n    return () => {\n      sortObject();\n    };\n  }, [cards, load, props.name, props.sorted]);\n  let cardEle;\n\n  if (sort.length !== 0) {\n    cardEle = sort.slice(0, props.itemLimit).map((crd, idx) => React.createElement(Link, {\n      to: \"/\" + crd.code,\n      key: idx,\n      className: \"cardFlop\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Card, {\n      name: crd.name,\n      bod: true,\n      imagesrc: crd.imagesrc,\n      code: crd.code,\n      loadColor: \"#343740\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })));\n  } else if (!load && !error) {\n    cardEle = React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"No cards in search\");\n  } else if (load && !error) {\n    cardEle = React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Fetching Cards...\");\n  } else if (load && error) {\n    cardEle = React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Loading Cards failed. Refresh page...\");\n  }\n\n  const button = () => {\n    if (props.itemLimit < sort.length && sort.length > 10) {\n      return React.createElement(Button, {\n        handleClick: () => props.changeLimit(),\n        text: \"Load More\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, cardEle), button());\n}\n\nconst mapStateToProps = state => {\n  return {\n    displayedSet: state.displayedSet,\n    itemLimit: state.itemLimit,\n    setLimit: state.setLimit,\n    sorted: state.sorted,\n    name: state.name,\n    style: state.style\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeLimit: () => {\n      dispatch(changeLimit());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","map":{"version":3,"sources":["/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/components/main/List.js"],"names":["React","changeLimit","Card","connect","Button","Link","List","props","useState","cards","setCards","sort","setSort","load","setLoad","error","setError","useEffect","handleStatusChange","status","fetch","then","response","json","data","catch","sortObject","sortedList","p","sorted","toggle","i","points","val","length","console","log","filter","crd","ret","v","split","includes","sides","hasOwnProperty","name","toLowerCase","toUpperCase","cardEle","slice","itemLimit","map","idx","code","imagesrc","button","mapStateToProps","state","displayedSet","setLimit","style","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {changeLimit} from \"../../redux/actions/setActions\";\nimport Card from '../card/Card';\nimport {connect} from 'react-redux';\nimport Button from '../input/Button';\nimport {Link} from 'react-router-dom';\n\nfunction List(props) {\n\n    const [cards, setCards] = React.useState([]);\n    const [sort, setSort] = React.useState([]);\n    const [load, setLoad] = React.useState(true);\n    const [error, setError] = React.useState(false);\n\n\n\n    React.useEffect(() => {\n\n        function handleStatusChange(status) {\n            setCards(status)\n        }\n\n        if (load) {\n            fetch(\"https://swdestinydb.com/api/public/cards/\")\n                .then(response => {\n                    return response.json();\n                })\n                .then((data) => {\n                    setLoad(false);\n                    handleStatusChange(data);\n                }).catch(function () {\n                setError(true);\n            });\n        }\n\n        function sortObject() {\n\n            let sortedList = cards;\n\n            for (let p in props.sorted) {\n\n\n                if (props.sorted[p].toggle) {\n\n                    if (p === \"points\") {\n\n                        for (let i = 0; i < props.sorted.points.val.length; i++) {\n                            console.log(props.sorted.points.val[i]);\n\n                            sortedList = sortedList.filter(crd => {\n                                let ret =false;\n                                if (crd.points!==null) {\n                                    for (let v = 0; v < crd.points.split(\"/\").length; v++) {\n                                        if(crd.points.split(\"/\")[v].includes(props.sorted.points.val[i])&&props.sorted.points.val[i].length===crd.points.split(\"/\")[v].length){\n                                            ret=true;\n                                        }\n                                    }\n                                }\n                                return (ret ? crd : null)\n\n                            });\n                        }\n\n\n                    } else if (p === \"sides\") {\n\n                        for (let i = 0; i < props.sorted.sides.val.length; i++) {\n\n                            sortedList = sortedList.filter(crd => {\n                                let ret =false;\n                                if (crd.hasOwnProperty('sides')) {\n                                    for (let v = 0; v < crd.sides.length; v++) {\n                                        if(crd.sides[v].includes(props.sorted.sides.val[i])){\n                                           ret=true\n                                        }\n                                    }\n                                }\n                                return (ret ? crd : null)\n\n                            });\n                        }\n\n\n                    } else {\n                        sortedList = sortedList.filter(crd => {\n\n                            return props.sorted[p].val.includes(crd[p])\n\n                        });\n                    }\n                }\n            }\n\n\n            if (props.name !== '') {\n                sortedList = sortedList.filter(crd => {\n                    if (crd.name.includes(props.name)) {\n                        return true\n                    } else if (crd.name.toLowerCase().includes(props.name)) {\n                        return true\n                    } else return crd.name.toUpperCase().includes(props.name);\n                });\n            }\n\n\n            setSort(sortedList)\n        }\n\n        sortObject();\n\n        return ()=>{\n            sortObject();\n        }\n\n    }, [cards, load, props.name, props.sorted]);\n\n\n    let cardEle;\n\n    if (sort.length !== 0) {\n        cardEle = sort.slice(0, props.itemLimit).map((crd, idx) =>\n\n\n            <Link to={\"/\" + crd.code} key={idx} className={\"cardFlop\"}>\n\n                <Card name={crd.name} bod={true} imagesrc={crd.imagesrc} code={crd.code}\n                      loadColor={\"#343740\"}/>\n            </Link>\n        );\n    } else if (!load && !error) {\n        cardEle = <h1>No cards in search</h1>;\n    } else if (load && !error) {\n        cardEle = <h1>Fetching Cards...</h1>;\n    } else if (load && error) {\n        cardEle = <h1>Loading Cards failed. Refresh page...</h1>;\n    }\n\n\n    const button = () => {\n        if (props.itemLimit < sort.length && sort.length > 10) {\n            return <Button handleClick={() => props.changeLimit()} text={\"Load More\"}/>\n        }\n    };\n\n\n    return (\n\n        <div className={\"list\"}>\n            <div className={\"wrapper\"}>\n                {cardEle}\n            </div>\n            {button()}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        displayedSet: state.displayedSet,\n        itemLimit: state.itemLimit,\n        setLimit: state.setLimit,\n        sorted: state.sorted,\n        name: state.name,\n        style: state.style\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        changeLimit: () => {\n            dispatch(changeLimit())\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\n"]},"metadata":{},"sourceType":"module"}
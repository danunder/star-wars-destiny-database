{"ast":null,"code":"import _slicedToArray from \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/components/card/Card.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner, faExclamationCircle } from '@fortawesome/free-solid-svg-icons';\nimport { useLocation } from \"react-router-dom\";\n\nfunction Card(props) {\n  const _React$useState = React.useState(\"loading\"),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        load = _React$useState2[0],\n        updateLoading = _React$useState2[1];\n\n  const _React$useState3 = React.useState({\n    img: false,\n    load: true,\n    error: false\n  }),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        rend = _React$useState4[0],\n        rendElement = _React$useState4[1];\n\n  const _React$useState5 = React.useState(0),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        seconds = _React$useState6[0],\n        setSeconds = _React$useState6[1];\n\n  React.useEffect(() => {\n    let interval = null;\n    interval = setInterval(() => {\n      setSeconds(seconds => seconds + 1);\n\n      if (load) {\n        if (props.imagesrc === null) {\n          rendElement({\n            img: false,\n            load: false,\n            error: true\n          });\n        } else {\n          rendElement({\n            img: true,\n            load: false,\n            error: false\n          });\n        }\n      } else {\n        if (seconds > 3) {\n          rendElement({\n            img: false,\n            load: false,\n            error: true\n          });\n        } else {\n          rendElement({\n            img: false,\n            load: true,\n            error: false\n          });\n        }\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [seconds]);\n\n  const handleImageLoad = () => {\n    updateLoading(true);\n  };\n\n  const handleImageError = () => {\n    updateLoading(false);\n  };\n\n  let location = useLocation();\n  return React.createElement(\"div\", {\n    className: \"card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, props.name), React.createElement(\"div\", {\n    className: \"cardWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, rend.img && React.createElement(\"img\", {\n    alt: props.name,\n    onLoad: handleImageLoad,\n    onError: handleImageError,\n    src: props.imagesrc,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, rend.load && React.createElement(FontAwesomeIcon, {\n    icon: faSpinner,\n    spin: true,\n    size: \"lg\",\n    style: {\n      color: props.loadColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), rend.error && React.createElement(FontAwesomeIcon, {\n    icon: faExclamationCircle,\n    style: {\n      color: \"red\"\n    },\n    size: \"6x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }))));\n}\n\nexport default Card;","map":{"version":3,"sources":["/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/components/card/Card.js"],"names":["React","Link","FontAwesomeIcon","faSpinner","faExclamationCircle","useLocation","Card","props","useState","load","updateLoading","img","error","rend","rendElement","seconds","setSeconds","useEffect","interval","setInterval","imagesrc","clearInterval","handleImageLoad","handleImageError","location","name","color","loadColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faSpinner, faExclamationCircle} from '@fortawesome/free-solid-svg-icons';\nimport { useLocation } from \"react-router-dom\";\nfunction Card(props) {\n\n    const [load, updateLoading] = React.useState(\"loading\");\n    const [rend, rendElement] = React.useState({\n        img:false,\n        load:true,\n        error:false\n    });\n    const [seconds, setSeconds] = React.useState(0);\n\n\n    React.useEffect(() => {\n        let interval = null;\n\n            interval = setInterval(() => {\n                setSeconds(seconds => seconds + 1);\n                if (load) {\n                    if(props.imagesrc===null){\n                        rendElement({\n                            img:false,\n                            load:false,\n                            error:true\n                        });\n                    }else{\n                        rendElement({\n                            img:true,\n                            load:false,\n                            error:false\n                        });\n                    }\n\n                } else {\n                    if(seconds>3){\n                        rendElement({\n                            img:false,\n                            load:false,\n                            error:true\n                        });\n                    }else{\n                        rendElement({\n                            img:false,\n                            load:true,\n                            error:false\n                        });\n                    }\n                }\n            }, 1000);\n\n        return () => clearInterval(interval);\n    }, [seconds]);\n\n    const handleImageLoad = () => {\n        updateLoading(true)\n    };\n\n    const handleImageError = () => {\n        updateLoading(false)\n    };\n\n    let location = useLocation();\n\n    return (\n        <div className={\"card\"} >\n            <h1>{props.name}</h1>\n            <div className={\"cardWrapper\"}>\n                {rend.img && <img alt={props.name} onLoad={handleImageLoad} onError={handleImageError} src={props.imagesrc}/>}\n                <div>\n                    {rend.load&&<FontAwesomeIcon icon={faSpinner} spin size={\"lg\"} style={{color:props.loadColor}}/>}\n                    {rend.error&&<FontAwesomeIcon icon={faExclamationCircle} style={{color:\"red\"}} size={\"6x\"}/>}\n                </div>\n            </div>\n\n\n        </div>\n    )\n}\n\nexport default Card;"]},"metadata":{},"sourceType":"module"}
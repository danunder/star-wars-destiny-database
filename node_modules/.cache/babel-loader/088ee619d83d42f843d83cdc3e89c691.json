{"ast":null,"code":"import _slicedToArray from \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/components/main/List.js\";\nimport React from 'react';\nimport { changeLimit } from \"../../redux/actions/setActions\";\nimport Card from '../card/Card';\nimport { connect } from 'react-redux';\nimport Button from '../input/Button';\nimport { Link } from 'react-router-dom';\nimport { formats } from '../../data/Formats';\n\nfunction List(props) {\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        sort = _React$useState2[0],\n        setSort = _React$useState2[1];\n\n  const _React$useState3 = React.useState(true),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        load = _React$useState4[0],\n        setLoad = _React$useState4[1];\n\n  const _React$useState5 = React.useState(false),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        error = _React$useState6[0],\n        setError = _React$useState6[1];\n\n  React.useEffect(() => {\n    function sortObject() {\n      let sortedList = props.cards;\n\n      for (let p in props.sorted) {\n        if (props.sorted[p].toggle) {\n          if (p === \"points\") {\n            sortedList = sortedList.filter(crd => {\n              let ret = false;\n\n              if (crd.points !== null) {\n                let arrayPoints = crd.points.split(\"/\");\n\n                for (let i = 0; i < props.sorted.points.val.length; i++) {\n                  for (let v = 0; v < arrayPoints.length; v++) {\n                    if (arrayPoints[v] === props.sorted.points.val[i]) {\n                      ret = true;\n                    }\n                  }\n                }\n              }\n\n              return ret ? crd : null;\n            });\n          } else if (p === \"sides\") {\n            for (let i = 0; i < props.sorted.sides.val.length; i++) {\n              sortedList = sortedList.filter(crd => {\n                let ret = false;\n\n                if (crd.hasOwnProperty('sides')) {\n                  for (let v = 0; v < crd.sides.length; v++) {\n                    if (crd.sides[v].includes(props.sorted.sides.val[i])) {\n                      ret = true;\n                    }\n                  }\n                }\n\n                return ret ? crd : null;\n              });\n            }\n          } else if (p === 'formats') {\n            sortedList = sortedList.filter(crd => {\n              let ret = false;\n\n              for (let i = 0; i < props.formats.length; i++) {\n                for (let q = 0; q < props.sorted.formats.val.length; q++) {\n                  if (props.formats[i].name === props.sorted.formats.val[q] && formats[i].data.sets.includes(crd.set_code)) {\n                    ret = true;\n                  }\n                }\n              }\n\n              return ret ? crd : null;\n            });\n          } else if (p === 'restricted') {\n            sortedList = sortedList.filter(crd => {\n              let ret = false;\n\n              for (let y = 0; y < props.formats.length; y++) {\n                for (let i = 0; i < props.formats[y].data.restricted.length; i++) {\n                  if (props.formats[y].data.restricted[i] === crd.code && props.sorted.restricted.val.includes(\"restricted\")) {\n                    ret = true;\n                  }\n                }\n              }\n\n              return ret ? crd : null;\n            });\n          } else if (p === 'balanced') {\n            sortedList = sortedList.filter(crd => {\n              let ret = false;\n\n              for (let y = 0; y < props.formats.length; y++) {\n                for (let i in props.formats[y].data.balance) {\n                  if (i === crd.code && props.sorted.balanced.val.includes(\"balanced\")) {\n                    ret = true;\n                  }\n                }\n              }\n\n              return ret ? crd : null;\n            });\n          } else if (p === 'keywords') {\n            sortedList = sortedList.filter(crd => {\n              let ret = false;\n\n              for (let i = 0; i < props.sorted.keywords.val.length; i++) {\n                if (crd.text !== null && crd.text.includes(props.sorted.keywords.val[i])) {\n                  ret = true;\n                }\n              }\n\n              return ret ? crd : null;\n            });\n          } else {\n            sortedList = sortedList.filter(crd => {\n              return props.sorted[p].val.includes(crd[p]);\n            });\n          }\n        }\n      }\n\n      if (props.name !== '') {\n        sortedList = sortedList.filter(crd => {\n          if (crd.name.includes(props.name)) {\n            return true;\n          } else if (crd.name.toLowerCase().includes(props.name)) {\n            return true;\n          } else return crd.name.toUpperCase().includes(props.name);\n        });\n      }\n\n      setSort(sortedList);\n    }\n\n    sortObject();\n    return () => {\n      sortObject();\n    };\n  }, [load, props.name, props.sorted, props.cards, props.formats]);\n  let cardEle;\n\n  if (sort.length !== 0) {\n    cardEle = sort.slice(0, props.itemLimit).map((crd, idx) => React.createElement(Link, {\n      to: \"/\" + crd.code,\n      key: idx,\n      className: \"cardFlop\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(Card, {\n      name: crd.name,\n      bod: true,\n      imagesrc: crd.imagesrc,\n      code: crd.code,\n      loadColor: \"#343740\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    })));\n  } else if (!load && !error) {\n    cardEle = React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"No cards in search\");\n  } else if (load && !error) {\n    cardEle = React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Fetching Cards...\");\n  } else if (load && error) {\n    cardEle = React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Loading Cards failed. Refresh page...\");\n  }\n\n  const button = () => {\n    if (props.itemLimit < sort.length && sort.length > 10) {\n      return React.createElement(Button, {\n        handleClick: () => props.changeLimit(),\n        text: \"Load More\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, cardEle), button());\n}\n\nconst mapStateToProps = state => {\n  return {\n    displayedSet: state.displayedSet,\n    itemLimit: state.itemLimit,\n    setLimit: state.setLimit,\n    sorted: state.sorted,\n    name: state.name,\n    style: state.style,\n    cards: state.cards,\n    formats: state.formats\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeLimit: () => {\n      dispatch(changeLimit());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","map":{"version":3,"sources":["/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/components/main/List.js"],"names":["React","changeLimit","Card","connect","Button","Link","formats","List","props","useState","sort","setSort","load","setLoad","error","setError","useEffect","sortObject","sortedList","cards","p","sorted","toggle","filter","crd","ret","points","arrayPoints","split","i","val","length","v","sides","hasOwnProperty","includes","q","name","data","sets","set_code","y","restricted","code","balance","balanced","keywords","text","toLowerCase","toUpperCase","cardEle","slice","itemLimit","map","idx","imagesrc","button","mapStateToProps","state","displayedSet","setLimit","style","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,gCAA1B;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAAQC,OAAR,QAAsB,oBAAtB;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA,0BAEOR,KAAK,CAACS,QAAN,CAAe,EAAf,CAFP;AAAA;AAAA,QAEVC,IAFU;AAAA,QAEJC,OAFI;;AAAA,2BAGOX,KAAK,CAACS,QAAN,CAAe,IAAf,CAHP;AAAA;AAAA,QAGVG,IAHU;AAAA,QAGJC,OAHI;;AAAA,2BAISb,KAAK,CAACS,QAAN,CAAe,KAAf,CAJT;AAAA;AAAA,QAIVK,KAJU;AAAA,QAIHC,QAJG;;AAOjBf,EAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AAGlB,aAASC,UAAT,GAAsB;AAElB,UAAIC,UAAU,GAAGV,KAAK,CAACW,KAAvB;;AAEA,WAAK,IAAIC,CAAT,IAAcZ,KAAK,CAACa,MAApB,EAA4B;AAGxB,YAAIb,KAAK,CAACa,MAAN,CAAaD,CAAb,EAAgBE,MAApB,EAA4B;AAExB,cAAIF,CAAC,KAAK,QAAV,EAAoB;AAGhBF,YAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkBC,GAAG,IAAI;AAClC,kBAAIC,GAAG,GAAG,KAAV;;AACA,kBAAID,GAAG,CAACE,MAAJ,KAAe,IAAnB,EAAyB;AACrB,oBAAIC,WAAW,GAAGH,GAAG,CAACE,MAAJ,CAAWE,KAAX,CAAiB,GAAjB,CAAlB;;AACA,qBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,KAAK,CAACa,MAAN,CAAaK,MAAb,CAAoBI,GAApB,CAAwBC,MAA5C,EAAoDF,CAAC,EAArD,EAAyD;AACrD,uBAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,WAAW,CAACI,MAAhC,EAAwCC,CAAC,EAAzC,EAA6C;AACzC,wBAAIL,WAAW,CAACK,CAAD,CAAX,KAAmBxB,KAAK,CAACa,MAAN,CAAaK,MAAb,CAAoBI,GAApB,CAAwBD,CAAxB,CAAvB,EAAmD;AAE/CJ,sBAAAA,GAAG,GAAG,IAAN;AACH;AACJ;AACJ;AACJ;;AACD,qBAAQA,GAAG,GAAGD,GAAH,GAAS,IAApB;AAEH,aAfY,CAAb;AAkBH,WArBD,MAqBO,IAAIJ,CAAC,KAAK,OAAV,EAAmB;AAEtB,iBAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,KAAK,CAACa,MAAN,CAAaY,KAAb,CAAmBH,GAAnB,CAAuBC,MAA3C,EAAmDF,CAAC,EAApD,EAAwD;AAEpDX,cAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkBC,GAAG,IAAI;AAClC,oBAAIC,GAAG,GAAG,KAAV;;AACA,oBAAID,GAAG,CAACU,cAAJ,CAAmB,OAAnB,CAAJ,EAAiC;AAC7B,uBAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,GAAG,CAACS,KAAJ,CAAUF,MAA9B,EAAsCC,CAAC,EAAvC,EAA2C;AACvC,wBAAIR,GAAG,CAACS,KAAJ,CAAUD,CAAV,EAAaG,QAAb,CAAsB3B,KAAK,CAACa,MAAN,CAAaY,KAAb,CAAmBH,GAAnB,CAAuBD,CAAvB,CAAtB,CAAJ,EAAsD;AAClDJ,sBAAAA,GAAG,GAAG,IAAN;AACH;AACJ;AACJ;;AACD,uBAAQA,GAAG,GAAGD,GAAH,GAAS,IAApB;AAEH,eAXY,CAAb;AAYH;AAGJ,WAnBM,MAmBA,IAAIJ,CAAC,KAAK,SAAV,EAAqB;AACxBF,YAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkBC,GAAG,IAAI;AAClC,kBAAIC,GAAG,GAAG,KAAV;;AACA,mBAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,KAAK,CAACF,OAAN,CAAcyB,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC3C,qBAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5B,KAAK,CAACa,MAAN,CAAaf,OAAb,CAAqBwB,GAArB,CAAyBC,MAA7C,EAAqDK,CAAC,EAAtD,EAA0D;AACtD,sBAAI5B,KAAK,CAACF,OAAN,CAAcuB,CAAd,EAAiBQ,IAAjB,KAA0B7B,KAAK,CAACa,MAAN,CAAaf,OAAb,CAAqBwB,GAArB,CAAyBM,CAAzB,CAA1B,IAAyD9B,OAAO,CAACuB,CAAD,CAAP,CAAWS,IAAX,CAAgBC,IAAhB,CAAqBJ,QAArB,CAA8BX,GAAG,CAACgB,QAAlC,CAA7D,EAA0G;AACtGf,oBAAAA,GAAG,GAAG,IAAN;AACH;AACJ;AACJ;;AACD,qBAAQA,GAAG,GAAGD,GAAH,GAAS,IAApB;AACH,aAVY,CAAb;AAWH,WAZM,MAYD,IAAIJ,CAAC,KAAK,YAAV,EAAwB;AAC1BF,YAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkBC,GAAG,IAAI;AAClC,kBAAIC,GAAG,GAAG,KAAV;;AACA,mBAAI,IAAIgB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACjC,KAAK,CAACF,OAAN,CAAcyB,MAA7B,EAAqCU,CAAC,EAAtC,EAAyC;AACrC,qBAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,KAAK,CAACF,OAAN,CAAcmC,CAAd,EAAiBH,IAAjB,CAAsBI,UAAtB,CAAiCX,MAArD,EAA6DF,CAAC,EAA9D,EAAkE;AAC9D,sBAAGrB,KAAK,CAACF,OAAN,CAAcmC,CAAd,EAAiBH,IAAjB,CAAsBI,UAAtB,CAAiCb,CAAjC,MAAsCL,GAAG,CAACmB,IAA1C,IAAgDnC,KAAK,CAACa,MAAN,CAAaqB,UAAb,CAAwBZ,GAAxB,CAA4BK,QAA5B,CAAqC,YAArC,CAAnD,EAAsG;AAClGV,oBAAAA,GAAG,GAAC,IAAJ;AACH;AACJ;AACJ;;AAED,qBAAQA,GAAG,GAAGD,GAAH,GAAS,IAApB;AACH,aAXY,CAAb;AAYH,WAbK,MAaA,IAAIJ,CAAC,KAAK,UAAV,EAAsB;AACxBF,YAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkBC,GAAG,IAAI;AAClC,kBAAIC,GAAG,GAAG,KAAV;;AACA,mBAAI,IAAIgB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACjC,KAAK,CAACF,OAAN,CAAcyB,MAA7B,EAAqCU,CAAC,EAAtC,EAAyC;AACrC,qBAAK,IAAIZ,CAAT,IAAcrB,KAAK,CAACF,OAAN,CAAcmC,CAAd,EAAiBH,IAAjB,CAAsBM,OAApC,EAA6C;AACzC,sBAAGf,CAAC,KAAGL,GAAG,CAACmB,IAAR,IAAcnC,KAAK,CAACa,MAAN,CAAawB,QAAb,CAAsBf,GAAtB,CAA0BK,QAA1B,CAAmC,UAAnC,CAAjB,EAAgE;AAC5DV,oBAAAA,GAAG,GAAC,IAAJ;AACH;AACJ;AACJ;;AAED,qBAAQA,GAAG,GAAGD,GAAH,GAAS,IAApB;AACH,aAXY,CAAb;AAYH,WAbK,MAaA,IAAIJ,CAAC,KAAK,UAAV,EAAsB;AACxBF,YAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkBC,GAAG,IAAI;AAClC,kBAAIC,GAAG,GAAG,KAAV;;AACA,mBAAI,IAAII,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACrB,KAAK,CAACa,MAAN,CAAayB,QAAb,CAAsBhB,GAAtB,CAA0BC,MAAzC,EAAiDF,CAAC,EAAlD,EAAqD;AACjD,oBAAGL,GAAG,CAACuB,IAAJ,KAAW,IAAX,IAAiBvB,GAAG,CAACuB,IAAJ,CAASZ,QAAT,CAAkB3B,KAAK,CAACa,MAAN,CAAayB,QAAb,CAAsBhB,GAAtB,CAA0BD,CAA1B,CAAlB,CAApB,EAAoE;AAChEJ,kBAAAA,GAAG,GAAC,IAAJ;AACH;AACJ;;AACD,qBAAQA,GAAG,GAAGD,GAAH,GAAS,IAApB;AACH,aARY,CAAb;AASH,WAVK,MAUC;AACHN,YAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkBC,GAAG,IAAI;AAElC,qBAAOhB,KAAK,CAACa,MAAN,CAAaD,CAAb,EAAgBU,GAAhB,CAAoBK,QAApB,CAA6BX,GAAG,CAACJ,CAAD,CAAhC,CAAP;AAEH,aAJY,CAAb;AAKH;AACJ;AACJ;;AAGD,UAAIZ,KAAK,CAAC6B,IAAN,KAAe,EAAnB,EAAuB;AACnBnB,QAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkBC,GAAG,IAAI;AAClC,cAAIA,GAAG,CAACa,IAAJ,CAASF,QAAT,CAAkB3B,KAAK,CAAC6B,IAAxB,CAAJ,EAAmC;AAC/B,mBAAO,IAAP;AACH,WAFD,MAEO,IAAIb,GAAG,CAACa,IAAJ,CAASW,WAAT,GAAuBb,QAAvB,CAAgC3B,KAAK,CAAC6B,IAAtC,CAAJ,EAAiD;AACpD,mBAAO,IAAP;AACH,WAFM,MAEA,OAAOb,GAAG,CAACa,IAAJ,CAASY,WAAT,GAAuBd,QAAvB,CAAgC3B,KAAK,CAAC6B,IAAtC,CAAP;AACV,SANY,CAAb;AAOH;;AAGD1B,MAAAA,OAAO,CAACO,UAAD,CAAP;AACH;;AAEDD,IAAAA,UAAU;AAEV,WAAO,MAAM;AACTA,MAAAA,UAAU;AACb,KAFD;AAIH,GAnID,EAmIG,CAACL,IAAD,EAAOJ,KAAK,CAAC6B,IAAb,EAAmB7B,KAAK,CAACa,MAAzB,EAAiCb,KAAK,CAACW,KAAvC,EAA8CX,KAAK,CAACF,OAApD,CAnIH;AAsIA,MAAI4C,OAAJ;;AAEA,MAAIxC,IAAI,CAACqB,MAAL,KAAgB,CAApB,EAAuB;AACnBmB,IAAAA,OAAO,GAAGxC,IAAI,CAACyC,KAAL,CAAW,CAAX,EAAc3C,KAAK,CAAC4C,SAApB,EAA+BC,GAA/B,CAAmC,CAAC7B,GAAD,EAAM8B,GAAN,KAGzC,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAE,MAAM9B,GAAG,CAACmB,IAApB;AAA0B,MAAA,GAAG,EAAEW,GAA/B;AAAoC,MAAA,SAAS,EAAE,UAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE9B,GAAG,CAACa,IAAhB;AAAsB,MAAA,GAAG,EAAE,IAA3B;AAAiC,MAAA,QAAQ,EAAEb,GAAG,CAAC+B,QAA/C;AAAyD,MAAA,IAAI,EAAE/B,GAAG,CAACmB,IAAnE;AACM,MAAA,SAAS,EAAE,SADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAHM,CAAV;AASH,GAVD,MAUO,IAAI,CAAC/B,IAAD,IAAS,CAACE,KAAd,EAAqB;AACxBoC,IAAAA,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAV;AACH,GAFM,MAEA,IAAItC,IAAI,IAAI,CAACE,KAAb,EAAoB;AACvBoC,IAAAA,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAV;AACH,GAFM,MAEA,IAAItC,IAAI,IAAIE,KAAZ,EAAmB;AACtBoC,IAAAA,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAV;AACH;;AAGD,QAAMM,MAAM,GAAG,MAAM;AACjB,QAAIhD,KAAK,CAAC4C,SAAN,GAAkB1C,IAAI,CAACqB,MAAvB,IAAiCrB,IAAI,CAACqB,MAAL,GAAc,EAAnD,EAAuD;AACnD,aAAO,oBAAC,MAAD;AAAQ,QAAA,WAAW,EAAE,MAAMvB,KAAK,CAACP,WAAN,EAA3B;AAAgD,QAAA,IAAI,EAAE,WAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;AACJ,GAJD;;AAOA,SAEI;AAAK,IAAA,SAAS,EAAE,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAE,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKiD,OADL,CADJ,EAIKM,MAAM,EAJX,CAFJ;AASH;;AAED,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHC,IAAAA,YAAY,EAAED,KAAK,CAACC,YADjB;AAEHP,IAAAA,SAAS,EAAEM,KAAK,CAACN,SAFd;AAGHQ,IAAAA,QAAQ,EAAEF,KAAK,CAACE,QAHb;AAIHvC,IAAAA,MAAM,EAAEqC,KAAK,CAACrC,MAJX;AAKHgB,IAAAA,IAAI,EAAEqB,KAAK,CAACrB,IALT;AAMHwB,IAAAA,KAAK,EAAEH,KAAK,CAACG,KANV;AAOH1C,IAAAA,KAAK,EAACuC,KAAK,CAACvC,KAPT;AAQHb,IAAAA,OAAO,EAACoD,KAAK,CAACpD;AARX,GAAP;AAUH,CAXD;;AAaA,MAAMwD,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACH9D,IAAAA,WAAW,EAAE,MAAM;AACf8D,MAAAA,QAAQ,CAAC9D,WAAW,EAAZ,CAAR;AACH;AAHE,GAAP;AAKH,CAND;;AAQA,eAAeE,OAAO,CAACsD,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CvD,IAA7C,CAAf","sourcesContent":["import React from 'react';\nimport {changeLimit} from \"../../redux/actions/setActions\";\nimport Card from '../card/Card';\nimport {connect} from 'react-redux';\nimport Button from '../input/Button';\nimport {Link} from 'react-router-dom';\nimport {formats} from '../../data/Formats';\n\nfunction List(props) {\n\n    const [sort, setSort] = React.useState([]);\n    const [load, setLoad] = React.useState(true);\n    const [error, setError] = React.useState(false);\n\n\n    React.useEffect(() => {\n\n\n        function sortObject() {\n\n            let sortedList = props.cards;\n\n            for (let p in props.sorted) {\n\n\n                if (props.sorted[p].toggle) {\n\n                    if (p === \"points\") {\n\n\n                        sortedList = sortedList.filter(crd => {\n                            let ret = false;\n                            if (crd.points !== null) {\n                                let arrayPoints = crd.points.split(\"/\");\n                                for (let i = 0; i < props.sorted.points.val.length; i++) {\n                                    for (let v = 0; v < arrayPoints.length; v++) {\n                                        if (arrayPoints[v] === props.sorted.points.val[i]) {\n\n                                            ret = true;\n                                        }\n                                    }\n                                }\n                            }\n                            return (ret ? crd : null)\n\n                        });\n\n\n                    } else if (p === \"sides\") {\n\n                        for (let i = 0; i < props.sorted.sides.val.length; i++) {\n\n                            sortedList = sortedList.filter(crd => {\n                                let ret = false;\n                                if (crd.hasOwnProperty('sides')) {\n                                    for (let v = 0; v < crd.sides.length; v++) {\n                                        if (crd.sides[v].includes(props.sorted.sides.val[i])) {\n                                            ret = true\n                                        }\n                                    }\n                                }\n                                return (ret ? crd : null)\n\n                            });\n                        }\n\n\n                    } else if (p === 'formats') {\n                        sortedList = sortedList.filter(crd => {\n                            let ret = false;\n                            for (let i = 0; i < props.formats.length; i++) {\n                                for (let q = 0; q < props.sorted.formats.val.length; q++) {\n                                    if (props.formats[i].name === props.sorted.formats.val[q] && formats[i].data.sets.includes(crd.set_code)) {\n                                        ret = true;\n                                    }\n                                }\n                            }\n                            return (ret ? crd : null);\n                        });\n                    }else if (p === 'restricted') {\n                        sortedList = sortedList.filter(crd => {\n                            let ret = false;\n                            for(let y=0; y<props.formats.length; y++){\n                                for (let i = 0; i < props.formats[y].data.restricted.length; i++) {\n                                    if(props.formats[y].data.restricted[i]===crd.code&&props.sorted.restricted.val.includes(\"restricted\")){\n                                        ret=true\n                                    }\n                                }\n                            }\n\n                            return (ret ? crd : null);\n                        });\n                    }else if (p === 'balanced') {\n                        sortedList = sortedList.filter(crd => {\n                            let ret = false;\n                            for(let y=0; y<props.formats.length; y++){\n                                for (let i in props.formats[y].data.balance) {\n                                    if(i===crd.code&&props.sorted.balanced.val.includes(\"balanced\")){\n                                        ret=true\n                                    }\n                                }\n                            }\n\n                            return (ret ? crd : null);\n                        });\n                    }else if (p === 'keywords') {\n                        sortedList = sortedList.filter(crd => {\n                            let ret = false;\n                            for(let i=0; i<props.sorted.keywords.val.length; i++){\n                                if(crd.text!==null&&crd.text.includes(props.sorted.keywords.val[i])){\n                                    ret=true;\n                                }\n                            }\n                            return (ret ? crd : null);\n                        });\n                    } else {\n                        sortedList = sortedList.filter(crd => {\n\n                            return props.sorted[p].val.includes(crd[p])\n\n                        });\n                    }\n                }\n            }\n\n\n            if (props.name !== '') {\n                sortedList = sortedList.filter(crd => {\n                    if (crd.name.includes(props.name)) {\n                        return true\n                    } else if (crd.name.toLowerCase().includes(props.name)) {\n                        return true\n                    } else return crd.name.toUpperCase().includes(props.name);\n                });\n            }\n\n\n            setSort(sortedList)\n        }\n\n        sortObject();\n\n        return () => {\n            sortObject();\n        }\n\n    }, [load, props.name, props.sorted, props.cards, props.formats]);\n\n\n    let cardEle;\n\n    if (sort.length !== 0) {\n        cardEle = sort.slice(0, props.itemLimit).map((crd, idx) =>\n\n\n            <Link to={\"/\" + crd.code} key={idx} className={\"cardFlop\"}>\n\n                <Card name={crd.name} bod={true} imagesrc={crd.imagesrc} code={crd.code}\n                      loadColor={\"#343740\"}/>\n            </Link>\n        );\n    } else if (!load && !error) {\n        cardEle = <h1>No cards in search</h1>;\n    } else if (load && !error) {\n        cardEle = <h1>Fetching Cards...</h1>;\n    } else if (load && error) {\n        cardEle = <h1>Loading Cards failed. Refresh page...</h1>;\n    }\n\n\n    const button = () => {\n        if (props.itemLimit < sort.length && sort.length > 10) {\n            return <Button handleClick={() => props.changeLimit()} text={\"Load More\"}/>\n        }\n    };\n\n\n    return (\n\n        <div className={\"list\"}>\n            <div className={\"wrapper\"}>\n                {cardEle}\n            </div>\n            {button()}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        displayedSet: state.displayedSet,\n        itemLimit: state.itemLimit,\n        setLimit: state.setLimit,\n        sorted: state.sorted,\n        name: state.name,\n        style: state.style,\n        cards:state.cards,\n        formats:state.formats\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        changeLimit: () => {\n            dispatch(changeLimit())\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\n"]},"metadata":{},"sourceType":"module"}
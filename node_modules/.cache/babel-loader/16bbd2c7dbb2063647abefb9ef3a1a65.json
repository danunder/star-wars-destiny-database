{"ast":null,"code":"var _jsxFileName = \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/components/nav/options.js\";\nimport React from 'react';\nimport { clearOptions } from \"../../redux/actions/setActions\";\nimport { connect } from 'react-redux';\nimport Option from './Option';\nimport Button from '../input/Button';\n\nfunction Options(props) {\n  let show;\n\n  if (props.options) {\n    show = {\n      \"right\": \"0\",\n      backgroundColor: props.style.navText,\n      color: props.style.nav\n    };\n  } else {\n    show = {\n      \"right\": \"-100%\",\n      backgroundColor: props.style.navText,\n      color: props.style.nav\n    };\n  }\n\n  let Sets = [];\n  props.sets.map(itm => {\n    Sets.push(itm.name);\n  });\n  let Sort = [{\n    name: \"Affiliations\",\n    type: \"affiliation_code\",\n    values: [\"hero\", \"villain\", \"neutral\"]\n  }, {\n    name: \"Colors\",\n    type: \"faction_code\",\n    values: [\"red\", \"blue\", \"yellow\", \"gray\"]\n  }, {\n    name: \"Rarity\",\n    type: \"rarity_name\",\n    values: [\"Starter\", \"Common\", \"Uncommon\", \"Rare\", \"Legendary\"]\n  }, {\n    name: \"Health\",\n    type: \"health\",\n    values: [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  }, {\n    name: \"Cost\",\n    type: \"cost\",\n    values: [0, 1, 2, 3, 4, 5, 6]\n  }, {\n    name: \"Set\",\n    type: \"set_name\",\n    values: Sets\n  }, {\n    name: \"Points\",\n    type: \"points\",\n    values: [\"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\"]\n  }, {\n    name: \"Type\",\n    type: \"type_code\",\n    values: [\"character\", \"upgrade\", \"support\", \"event\", \"downgrade\", \"plot\"]\n  }, {\n    name: \"Dice Sides\",\n    type: \"sides\",\n    values: [\"RD\", \"Sh\", \"MD\", \"ID\", \"Dc\", \"Dr\", \"F\", \"R\", \"Sp\", \"-\", \"+\"]\n  }, {\n    name: \"Formats\",\n    type: \"formats\",\n    values: [\"Standard\", \"Trilogy\", \"Infinite\"]\n  }, {\n    name: \"Restricted\",\n    type: \"restricted\",\n    values: [\"restricted\"]\n  }, {\n    name: \"Balanced\",\n    type: \"balanced\",\n    values: [\"balanced\"]\n  }, {\n    name: \"Keywords\",\n    type: \"keywords\",\n    values: [\"Guardian\", \"Ambush\", \"Redeploy\"]\n  }];\n  let options = Sort.map((srt, idx) => React.createElement(Option, {\n    key: idx,\n    opt: srt,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }));\n  return React.createElement(\"div\", {\n    className: \"options\",\n    style: show,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    style: {\n      color: props.style.nav\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"Sort Cards \"), React.createElement(Button, {\n    handleClick: () => props.clearOptions(),\n    text: \"Clear Search Query\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, options));\n}\n\nconst mapStateToProps = state => {\n  return {\n    options: state.options,\n    style: state.style,\n    sets: state.sets\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    clearOptions: () => {\n      dispatch(clearOptions());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Options);","map":{"version":3,"sources":["/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/components/nav/options.js"],"names":["React","clearOptions","connect","Option","Button","Options","props","show","options","backgroundColor","style","navText","color","nav","Sets","sets","map","itm","push","name","Sort","type","values","srt","idx","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {clearOptions} from \"../../redux/actions/setActions\";\nimport {connect} from 'react-redux';\nimport Option from './Option';\nimport Button from '../input/Button';\n\nfunction Options(props){\n\n    let show;\n\n    if(props.options){\n        show={\n            \"right\":\"0\",\n            backgroundColor:props.style.navText,\n            color:props.style.nav\n        }\n    }else{\n        show={\n            \"right\":\"-100%\",\n            backgroundColor:props.style.navText,\n            color:props.style.nav\n        }\n    }\n\n    let Sets = [];\n\n    props.sets.map((itm)=>{\n        Sets.push(itm.name)\n    });\n\n    let Sort = [\n\n        {\n            name: \"Affiliations\",\n            type: \"affiliation_code\",\n            values:[\"hero\", \"villain\", \"neutral\"]\n        },\n        {\n            name: \"Colors\",\n            type: \"faction_code\",\n            values:[\"red\", \"blue\", \"yellow\", \"gray\"]\n        },\n        {\n            name: \"Rarity\",\n            type: \"rarity_name\",\n            values:[\"Starter\", \"Common\", \"Uncommon\", \"Rare\", \"Legendary\"]\n        },\n        {\n            name:\"Health\",\n            type:\"health\",\n            values:[4,5,6,7,8,9,10,11,12,13,14,15]\n        },\n        {\n            name:\"Cost\",\n            type:\"cost\",\n            values:[0,1,2,3,4,5,6]\n        },\n        {\n            name:\"Set\",\n            type:\"set_name\",\n            values:Sets},\n        {\n            name:\"Points\",\n            type:\"points\",\n            values:[\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\"]\n        },\n        {\n            name:\"Type\",\n            type:\"type_code\",\n            values:[\"character\", \"upgrade\", \"support\", \"event\", \"downgrade\", \"plot\"]\n        },\n        {\n            name:\"Dice Sides\",\n            type:\"sides\",\n            values:[\"RD\", \"Sh\",\"MD\", \"ID\", \"Dc\",\"Dr\", \"F\", \"R\", \"Sp\",\"-\",\"+\"]\n\n        },\n        {\n            name:\"Formats\",\n            type:\"formats\",\n            values:[\"Standard\", \"Trilogy\", \"Infinite\"]\n        },\n        {\n            name: \"Restricted\",\n            type:\"restricted\",\n            values:[\"restricted\"]\n        },\n        {\n            name: \"Balanced\",\n            type:\"balanced\",\n            values:[\"balanced\"]\n        },\n        {\n            name: \"Keywords\",\n            type:\"keywords\",\n            values:[\"Guardian\", \"Ambush\", \"Redeploy\"]\n        }\n\n    ];\n\n\n    let options = Sort.map((srt, idx)=>\n        <Option key={idx} opt={srt}/>\n    );\n\n\n    return (\n        <div className={\"options\"} style={show}>\n            <div className={\"top\"}><h1 style={{color:props.style.nav}}>Sort Cards </h1><Button handleClick={() => props.clearOptions()} text={\"Clear Search Query\"}/></div>\n            <div className={\"wrapper\"}>\n                {options}\n            </div>\n\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        options:state.options,\n        style:state.style,\n        sets:state.sets\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n\n        clearOptions:()=>{\n            dispatch(clearOptions())\n        }\n    }\n};\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Options);\n"]},"metadata":{},"sourceType":"module"}
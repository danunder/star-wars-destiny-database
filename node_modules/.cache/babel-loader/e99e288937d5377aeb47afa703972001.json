{"ast":null,"code":"import _slicedToArray from \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/components/card/CardPage.js\";\nimport React from 'react';\nimport { Link } from \"react-router-dom\";\nimport Card from './Card';\nimport { connect } from 'react-redux';\nimport CardInfo from './CardInfo';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner, faExclamationCircle, faTimes } from '@fortawesome/free-solid-svg-icons';\n\nfunction CardPage(props) {\n  const _React$useState = React.useState(\"\"),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        card = _React$useState2[0],\n        setCard = _React$useState2[1];\n\n  const _React$useState3 = React.useState({\n    crd: false,\n    load: true,\n    error: false\n  }),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        rend = _React$useState4[0],\n        rendElement = _React$useState4[1];\n\n  React.useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n\n    function handleStatusChange(status) {\n      rendElement({\n        crd: true,\n        load: false,\n        error: false\n      });\n      setCard(status);\n    }\n\n    const unsubscribe = () => {\n      fetch(\"https://swdestinydb.com/api/public/cards/\", {\n        signal: signal\n      }).then(response => {\n        return response.json();\n      }).then(data => {\n        let cardMain = data.filter(crd => {\n          return props.match.params.id === crd.code;\n        });\n        handleStatusChange(cardMain[0]);\n      }).catch(() => rendElement({\n        crd: false,\n        load: false,\n        error: true\n      }));\n    };\n\n    unsubscribe();\n    return function cleanup() {\n      unsubscribe();\n      abortController.abort();\n    };\n  }, [props.match.params.id]);\n  const code = card.code;\n  return React.createElement(Link, {\n    className: props.match.params.id ? \"cardPageWrapper\" : undefined,\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"close\",\n    style: {\n      backgroundColor: props.style.navText,\n      color: props.style.nav\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faTimes,\n    spin: true,\n    size: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })), rend.load && React.createElement(FontAwesomeIcon, {\n    icon: faSpinner,\n    spin: true,\n    size: \"lg\",\n    style: {\n      color: props.loadColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), rend.error && React.createElement(FontAwesomeIcon, {\n    icon: faExclamationCircle,\n    style: {\n      color: \"red\"\n    },\n    size: \"6x\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), rend.crd && React.createElement(Card, {\n    name: card.name,\n    bod: false,\n    imagesrc: card.imagesrc,\n    code: card.code,\n    loadColor: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), code && React.createElement(CardInfo, {\n    crd: card,\n    code: code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => {\n  return {\n    style: state.style\n  };\n};\n\nexport default connect(mapStateToProps)(CardPage);","map":{"version":3,"sources":["/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/components/card/CardPage.js"],"names":["React","Link","Card","connect","CardInfo","FontAwesomeIcon","faSpinner","faExclamationCircle","faTimes","CardPage","props","useState","card","setCard","crd","load","error","rend","rendElement","useEffect","abortController","AbortController","signal","handleStatusChange","status","unsubscribe","fetch","then","response","json","data","cardMain","filter","match","params","id","code","catch","cleanup","abort","undefined","backgroundColor","style","navText","color","nav","loadColor","name","imagesrc","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n    Link\n} from \"react-router-dom\";\nimport Card from './Card';\nimport {connect} from 'react-redux';\nimport CardInfo from './CardInfo';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faSpinner, faExclamationCircle, faTimes} from '@fortawesome/free-solid-svg-icons';\n\n\nfunction CardPage(props){\n\n    const [card,setCard] = React.useState(\"\");\n\n    const [rend, rendElement] = React.useState({\n        crd:false,\n        load:true,\n        error:false\n    });\n\n\n\n\n    React.useEffect(()=>{\n\n        const abortController = new AbortController();\n        const signal  =abortController.signal;\n\n\n        function handleStatusChange(status) {\n            rendElement({\n                crd:true,\n                load:false,\n                error:false\n            });\n            setCard(status)\n        }\n\n        const unsubscribe = ()=>{\n\n\n            fetch(\"https://swdestinydb.com/api/public/cards/\", {signal:signal})\n                .then(response => {\n                    return response.json();\n                })\n                .then((data) => {\n\n                    let cardMain = data.filter(crd=>{\n                        return props.match.params.id===crd.code;\n                    });\n\n                    handleStatusChange(cardMain[0]);\n                }).catch(()=> rendElement({\n                crd:false,\n                load:false,\n                error:true\n            }))\n        };\n\n        unsubscribe();\n\n\n        return function cleanup(){\n            unsubscribe();\n            abortController.abort();\n        };\n\n    },[props.match.params.id]);\n\n    const code = card.code;\n\n\n    return (\n        <Link className={props.match.params.id ? \"cardPageWrapper\" : undefined} to={\"/\"}>\n\n            <div className={\"close\"} style={{backgroundColor:props.style.navText, color: props.style.nav}}>\n                <FontAwesomeIcon icon={faTimes} spin size={\"lg\"}/>\n            </div>\n\n            {rend.load&&<FontAwesomeIcon icon={faSpinner} spin size={\"lg\"} style={{color:props.loadColor}}/>}\n            {rend.error&&<FontAwesomeIcon icon={faExclamationCircle} style={{color:\"red\"}} size={\"6x\"}/>}\n\n            {rend.crd&&<Card  name={card.name} bod={false} imagesrc={card.imagesrc} code={card.code} loadColor={\"white\"}/>}\n            {code&&<CardInfo crd={card} code={code}/>}\n\n        </Link>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        style:state.style\n    }\n};\n\nexport default connect(mapStateToProps)(CardPage);"]},"metadata":{},"sourceType":"module"}
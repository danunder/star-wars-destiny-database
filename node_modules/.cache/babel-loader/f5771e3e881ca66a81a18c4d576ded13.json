{"ast":null,"code":"import _slicedToArray from \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/App.js\";\nimport React from 'react';\nimport './less/style.css';\nimport List from './components/main/List';\nimport CardPage from './components/card/CardPage';\nimport Nav from './components/nav/Navigation';\nimport Options from './components/nav/options';\nimport SortNav from './components/nav/SortNav';\nimport StyleOptions from './components/nav/StyleOptions';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner, faExclamationCircle } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\nimport { setCards, setFormats, setSets } from \"./redux/actions/setActions\";\nimport { Switch, Route } from \"react-router-dom\";\n\nfunction App(props) {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        show = _React$useState2[0],\n        updateShow = _React$useState2[1];\n\n  const _React$useState3 = React.useState(0),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        seconds = _React$useState4[0],\n        setSeconds = _React$useState4[1];\n\n  const _React$useState5 = React.useState(60),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        pad = _React$useState6[0],\n        setPad = _React$useState6[1];\n\n  const _React$useState7 = React.useState(\"load\"),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        load = _React$useState8[0],\n        setLoad = _React$useState8[1];\n\n  React.useEffect(() => {\n    localStorage.setItem('localStyle', JSON.stringify(props.style));\n    let loadCards = \"load\";\n    let loadFormats = \"load\";\n    let loadSets = \"load\"; // fetch(\"https://swdestinydb.com/api/public/cards/\")\n    //     .then(response => {\n    //         return response.json();\n    //     })\n    //     .then((data) => {\n    //         setLoad(\"loaded\");\n    //         props.setCards(data);\n    //     }).catch(function () {\n    //     setLoad(\"error\");\n    // });\n\n    if (loadCards === \"loaded\") {\n      setLoad(\"loaded\");\n    }\n\n    let check = false;\n\n    for (let p in props.sorted) {\n      if (props.sorted[p].toggle) {\n        check = true;\n      }\n    }\n\n    updateShow(check);\n    let interval = null;\n    interval = setInterval(() => {\n      setSeconds(seconds => seconds + 1);\n    }, 500);\n\n    if (load === \"loaded\") {\n      setPad(document.querySelector(\".sortNav\").getBoundingClientRect().height);\n      document.documentElement.style.backgroundColor = props.style.body;\n    }\n\n    return () => clearInterval(interval);\n  }, [props.style, props.sorted, seconds]);\n  let appStyle = {\n    backgroundColor: props.style.body\n  };\n  let wrapStyle = {\n    color: props.style.bodyText,\n    backgroundColor: props.style.body,\n    paddingTop: show ? \"\" + pad + \"px\" : \"0\"\n  };\n  return React.createElement(\"div\", {\n    className: \"App\",\n    style: appStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, load === \"load\" && React.createElement(FontAwesomeIcon, {\n    icon: faSpinner,\n    spin: true,\n    size: \"lg\",\n    style: {\n      color: props.style.bodyText\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => {\n  return {\n    style: state.style,\n    sorted: state.sorted\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setCards: crds => {\n      dispatch(setCards(crds));\n    },\n    setFormats: fmts => {\n      dispatch(setFormats(fmts));\n    },\n    setSets: sts => {\n      dispatch(setSets(sts));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/App.js"],"names":["React","List","CardPage","Nav","Options","SortNav","StyleOptions","FontAwesomeIcon","faSpinner","faExclamationCircle","connect","setCards","setFormats","setSets","Switch","Route","App","props","useState","show","updateShow","seconds","setSeconds","pad","setPad","load","setLoad","useEffect","localStorage","setItem","JSON","stringify","style","loadCards","loadFormats","loadSets","check","p","sorted","toggle","interval","setInterval","document","querySelector","getBoundingClientRect","height","documentElement","backgroundColor","body","clearInterval","appStyle","wrapStyle","color","bodyText","paddingTop","mapStateToProps","state","mapDispatchToProps","dispatch","crds","fmts","sts"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './less/style.css';\nimport List from './components/main/List';\nimport CardPage from './components/card/CardPage'\nimport Nav from './components/nav/Navigation';\nimport Options from './components/nav/options';\nimport SortNav from './components/nav/SortNav'\nimport StyleOptions from './components/nav/StyleOptions';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faSpinner, faExclamationCircle} from '@fortawesome/free-solid-svg-icons';\n\nimport {connect} from 'react-redux';\nimport {setCards, setFormats, setSets} from \"./redux/actions/setActions\";\n\nimport {\n    Switch,\n    Route\n} from \"react-router-dom\";\n\n\n\nfunction App(props) {\n\n    const [show, updateShow] = React.useState(false);\n    const [seconds, setSeconds] = React.useState(0);\n    const [pad, setPad] = React.useState(60);\n    const [load, setLoad] =React.useState(\"load\");\n\n\n    React.useEffect(() => {\n        localStorage.setItem('localStyle', JSON.stringify(props.style));\n        let loadCards=\"load\";\n        let loadFormats=\"load\";\n        let loadSets=\"load\";\n\n        // fetch(\"https://swdestinydb.com/api/public/cards/\")\n        //     .then(response => {\n        //         return response.json();\n        //     })\n        //     .then((data) => {\n        //         setLoad(\"loaded\");\n        //         props.setCards(data);\n        //     }).catch(function () {\n        //     setLoad(\"error\");\n        // });\n\n        if(loadCards===\"loaded\"){\n            setLoad(\"loaded\")\n        }\n\n        let check = false;\n\n        for (let p in props.sorted) {\n            if (props.sorted[p].toggle) {\n                check = true;\n            }\n        }\n\n        updateShow(check);\n\n        let interval = null;\n\n        interval = setInterval(() => {\n            setSeconds(seconds => seconds + 1);\n        }, 500);\n\n        if(load===\"loaded\"){\n            setPad(document.querySelector(\".sortNav\").getBoundingClientRect().height);\n\n            document.documentElement.style.backgroundColor = props.style.body;\n        }\n\n\n        return () => clearInterval(interval);\n\n    }, [props.style, props.sorted, seconds]);\n\n    let appStyle = {\n        backgroundColor: props.style.body\n    };\n\n    let wrapStyle = {\n        color: props.style.bodyText,\n        backgroundColor: props.style.body,\n        paddingTop: (show ? \"\" + pad + \"px\" : \"0\")\n    };\n\n    return (\n\n        <div className=\"App\" style={appStyle}>\n            {/*{load===\"loaded\"&&<span><Nav/> <SortNav/> <Options/> <StyleOptions/> <div className={\"mainWrapper\"} style={wrapStyle}><Switch><Route path=\"/\" component={List}/></Switch></div><Route path={\"/:id\"} component={CardPage}/></span>}*/}\n            {load===\"load\"&&<FontAwesomeIcon icon={faSpinner} spin size={\"lg\"} style={{color:props.style.bodyText}}/>}\n            {/*<Nav/>*/}\n            {/*<SortNav/>*/}\n            {/*<Options/>*/}\n            {/*<StyleOptions/>*/}\n            {/*<div className={\"mainWrapper\"} style={wrapStyle}>*/}\n            {/*    <Switch>*/}\n            {/*        <Route path=\"/\" component={List}/>*/}\n            {/*    </Switch>*/}\n            {/*</div>*/}\n            {/*<Route path={\"/:id\"} component={CardPage}/>*/}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        style: state.style,\n        sorted: state.sorted\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setCards: (crds) => {\n            dispatch(setCards(crds))\n        },\n        setFormats: (fmts) => {\n            dispatch(setFormats(fmts))\n        },\n        setSets: (sts) => {\n            dispatch(setSets(sts))\n        },\n    }\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}
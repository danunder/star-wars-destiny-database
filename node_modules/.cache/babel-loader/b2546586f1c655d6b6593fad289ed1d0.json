{"ast":null,"code":"import _slicedToArray from \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/App.js\";\nimport React from 'react';\nimport './less/style.css';\nimport List from './components/main/List';\nimport CardPage from './components/card/CardPage';\nimport Nav from './components/nav/Navigation';\nimport Options from './components/nav/options';\nimport SortNav from './components/nav/SortNav';\nimport StyleOptions from './components/nav/StyleOptions';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner, faExclamationCircle } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\nimport { setCards, setFormats, setSets } from \"./redux/actions/setActions\";\nimport { Switch, Route } from \"react-router-dom\";\n\nfunction App(props) {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        show = _React$useState2[0],\n        updateShow = _React$useState2[1];\n\n  const _React$useState3 = React.useState(0),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        seconds = _React$useState4[0],\n        setSeconds = _React$useState4[1];\n\n  const _React$useState5 = React.useState(60),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        pad = _React$useState6[0],\n        setPad = _React$useState6[1]; // const [load, setLoad] =React.useState(\"load\");\n\n\n  React.useEffect(() => {\n    localStorage.setItem('localStyle', JSON.stringify(props.style)); // let loadCards=\"load\";\n    // let loadFormats=\"load\";\n    // let loadSets=\"load\";\n    //\n    // fetch(\"https://swdestinydb.com/api/public/cards/\")\n    //     .then(response => {\n    //         return response.json();\n    //     })\n    //     .then((data) => {\n    //         loadCards=\"loaded\";\n    //         props.setCards(data);\n    //     }).catch(function () {\n    //     loadCards=\"error\";\n    // });\n    //\n    // fetch(\"https://swdestinydb.com/api/public/formats/\")\n    //     .then(response => {\n    //         return response.json();\n    //     })\n    //     .then((data) => {\n    //         loadFormats=\"loaded\";\n    //         props.setFormats(data);\n    //     }).catch(function () {\n    //     loadCards=\"error\";\n    // });\n    //\n    // fetch(\"https://swdestinydb.com/api/public/sets/\")\n    //     .then(response => {\n    //         return response.json();\n    //     })\n    //     .then((data) => {\n    //         loadSets=\"loaded\";\n    //         props.setSets(data);\n    //     }).catch(function () {\n    //     loadCards=\"error\";\n    // });\n    //\n    // if(loadCards===\"loaded\"&&loadFormats===\"loaded\"&&loadSets===\"loaded\"){\n    //     setLoad(\"loaded\")\n    // }else if(loadCards===\"error\"||loadFormats===\"error\"||loadSets===\"error\"){\n    //     setLoad(\"error\");\n    // }\n\n    let check = false;\n\n    for (let p in props.sorted) {\n      if (props.sorted[p].toggle) {\n        check = true;\n      }\n    }\n\n    updateShow(check);\n    let interval = null;\n    interval = setInterval(() => {\n      setSeconds(seconds => seconds + 1);\n    }, 500);\n\n    if (load === \"loaded\") {\n      setPad(document.querySelector(\".sortNav\").getBoundingClientRect().height);\n      document.documentElement.style.backgroundColor = props.style.body;\n    }\n\n    return () => clearInterval(interval);\n  }, [props.style, props.sorted, seconds]);\n  let appStyle = {\n    backgroundColor: props.style.body\n  };\n  let wrapStyle = {\n    color: props.style.bodyText,\n    backgroundColor: props.style.body,\n    paddingTop: show ? \"\" + pad + \"px\" : \"0\"\n  };\n  return React.createElement(\"div\", {\n    className: \"App\",\n    style: appStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(Nav, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(SortNav, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), React.createElement(Options, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), React.createElement(StyleOptions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"mainWrapper\",\n    style: wrapStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: \"/\",\n    component: List,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }))), React.createElement(Route, {\n    path: \"/:id\",\n    component: CardPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => {\n  return {\n    style: state.style,\n    sorted: state.sorted\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setCards: crds => {\n      dispatch(setCards(crds));\n    },\n    setFormats: fmts => {\n      dispatch(setFormats(fmts));\n    },\n    setSets: sts => {\n      dispatch(setSets(sts));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/App.js"],"names":["React","List","CardPage","Nav","Options","SortNav","StyleOptions","FontAwesomeIcon","faSpinner","faExclamationCircle","connect","setCards","setFormats","setSets","Switch","Route","App","props","useState","show","updateShow","seconds","setSeconds","pad","setPad","useEffect","localStorage","setItem","JSON","stringify","style","check","p","sorted","toggle","interval","setInterval","load","document","querySelector","getBoundingClientRect","height","documentElement","backgroundColor","body","clearInterval","appStyle","wrapStyle","color","bodyText","paddingTop","mapStateToProps","state","mapDispatchToProps","dispatch","crds","fmts","sts"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './less/style.css';\nimport List from './components/main/List';\nimport CardPage from './components/card/CardPage'\nimport Nav from './components/nav/Navigation';\nimport Options from './components/nav/options';\nimport SortNav from './components/nav/SortNav'\nimport StyleOptions from './components/nav/StyleOptions';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faSpinner, faExclamationCircle} from '@fortawesome/free-solid-svg-icons';\n\nimport {connect} from 'react-redux';\nimport {setCards, setFormats, setSets} from \"./redux/actions/setActions\";\n\nimport {\n    Switch,\n    Route\n} from \"react-router-dom\";\n\n\n\nfunction App(props) {\n\n    const [show, updateShow] = React.useState(false);\n    const [seconds, setSeconds] = React.useState(0);\n    const [pad, setPad] = React.useState(60);\n    // const [load, setLoad] =React.useState(\"load\");\n\n\n    React.useEffect(() => {\n        localStorage.setItem('localStyle', JSON.stringify(props.style));\n        // let loadCards=\"load\";\n        // let loadFormats=\"load\";\n        // let loadSets=\"load\";\n        //\n        // fetch(\"https://swdestinydb.com/api/public/cards/\")\n        //     .then(response => {\n        //         return response.json();\n        //     })\n        //     .then((data) => {\n        //         loadCards=\"loaded\";\n        //         props.setCards(data);\n        //     }).catch(function () {\n        //     loadCards=\"error\";\n        // });\n        //\n        // fetch(\"https://swdestinydb.com/api/public/formats/\")\n        //     .then(response => {\n        //         return response.json();\n        //     })\n        //     .then((data) => {\n        //         loadFormats=\"loaded\";\n        //         props.setFormats(data);\n        //     }).catch(function () {\n        //     loadCards=\"error\";\n        // });\n        //\n        // fetch(\"https://swdestinydb.com/api/public/sets/\")\n        //     .then(response => {\n        //         return response.json();\n        //     })\n        //     .then((data) => {\n        //         loadSets=\"loaded\";\n        //         props.setSets(data);\n        //     }).catch(function () {\n        //     loadCards=\"error\";\n        // });\n        //\n        // if(loadCards===\"loaded\"&&loadFormats===\"loaded\"&&loadSets===\"loaded\"){\n        //     setLoad(\"loaded\")\n        // }else if(loadCards===\"error\"||loadFormats===\"error\"||loadSets===\"error\"){\n        //     setLoad(\"error\");\n        // }\n\n        let check = false;\n\n        for (let p in props.sorted) {\n            if (props.sorted[p].toggle) {\n                check = true;\n            }\n        }\n\n        updateShow(check);\n\n        let interval = null;\n\n        interval = setInterval(() => {\n            setSeconds(seconds => seconds + 1);\n        }, 500);\n\n        if(load===\"loaded\"){\n            setPad(document.querySelector(\".sortNav\").getBoundingClientRect().height);\n\n            document.documentElement.style.backgroundColor = props.style.body;\n        }\n\n\n        return () => clearInterval(interval);\n\n    }, [props.style, props.sorted, seconds]);\n\n    let appStyle = {\n        backgroundColor: props.style.body\n    };\n\n    let wrapStyle = {\n        color: props.style.bodyText,\n        backgroundColor: props.style.body,\n        paddingTop: (show ? \"\" + pad + \"px\" : \"0\")\n    };\n\n    return (\n\n        <div className=\"App\" style={appStyle}>\n            {/*{load===\"loaded\"&&<span><Nav/> <SortNav/> <Options/> <StyleOptions/> <div className={\"mainWrapper\"} style={wrapStyle}><Switch><Route path=\"/\" component={List}/></Switch></div><Route path={\"/:id\"} component={CardPage}/></span>}*/}\n            {/*{load===\"load\"&&<div style={{height:\"100%\"}}><FontAwesomeIcon icon={faSpinner} spin size={\"lg\"} style={{color:props.style.bodyText}}/></div>}*/}\n            <Nav/>\n            <SortNav/>\n            <Options/>\n            <StyleOptions/>\n            <div className={\"mainWrapper\"} style={wrapStyle}>\n                <Switch>\n                    <Route path=\"/\" component={List}/>\n                </Switch>\n            </div>\n            <Route path={\"/:id\"} component={CardPage}/>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        style: state.style,\n        sorted: state.sorted\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setCards: (crds) => {\n            dispatch(setCards(crds))\n        },\n        setFormats: (fmts) => {\n            dispatch(setFormats(fmts))\n        },\n        setSets: (sts) => {\n            dispatch(setSets(sts))\n        },\n    }\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}
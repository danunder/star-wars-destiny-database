{"ast":null,"code":"import _slicedToArray from \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/App.js\";\nimport React from 'react';\nimport './less/style.css';\nimport List from './components/main/List';\nimport CardPage from './components/card/CardPage';\nimport Nav from './components/nav/Navigation';\nimport Options from './components/nav/options';\nimport SortNav from './components/nav/SortNav';\nimport StyleOptions from './components/nav/StyleOptions';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner, faExclamationCircle } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\nimport { setCards, setFormats, setSets } from \"./redux/actions/setActions\";\nimport { Switch, Route } from \"react-router-dom\";\n\nfunction App(props) {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        show = _React$useState2[0],\n        updateShow = _React$useState2[1];\n\n  const _React$useState3 = React.useState(0),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        seconds = _React$useState4[0],\n        setSeconds = _React$useState4[1];\n\n  const _React$useState5 = React.useState(60),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        pad = _React$useState6[0],\n        setPad = _React$useState6[1];\n\n  const _React$useState7 = React.useState(\"load\"),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        loadCard = _React$useState8[0],\n        setLoadCards = _React$useState8[1];\n\n  const _React$useState9 = React.useState(\"load\"),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        loadFormat = _React$useState10[0],\n        setLoadFormat = _React$useState10[1];\n\n  const _React$useState11 = React.useState(\"load\"),\n        _React$useState12 = _slicedToArray(_React$useState11, 2),\n        loadSet = _React$useState12[0],\n        setLoadSet = _React$useState12[1];\n\n  const _React$useState13 = React.useState(\"load\"),\n        _React$useState14 = _slicedToArray(_React$useState13, 2),\n        load = _React$useState14[0],\n        setLoad = _React$useState14[1];\n\n  React.useEffect(() => {\n    localStorage.setItem('localStyle', JSON.stringify(props.style));\n    fetch(\"https://swdestinydb.com/api/public/cards/\").then(response => {\n      return response.json();\n    }).then(data => {\n      setLoadCards(\"loaded\");\n      props.setCards(data);\n    }).catch(function () {\n      setLoadCards(\"error\");\n    });\n    fetch(\"https://swdestinydb.com/api/public/formats/\").then(response => {\n      return response.json();\n    }).then(data => {\n      setLoadFormat(\"loaded\");\n      props.setFormats(data);\n    }).catch(function () {\n      setLoadFormat(\"error\");\n    }); //\n\n    fetch(\"https://swdestinydb.com/api/public/sets/\").then(response => {\n      return response.json();\n    }).then(data => {\n      setLoadSet(\"loaded\");\n      props.setSets(data);\n    }).catch(function () {\n      setLoadSet(\"error\");\n    });\n\n    if (loadCard === \"loaded\" && loadFormat === \"loaded\" && loadSet === \"loaded\") {\n      setLoad(\"loaded\");\n    } else if (loadCard === \"error\" || loadFormat === \"error\" || loadSet === \"error\") {\n      setLoad(\"error\");\n    }\n\n    let check = false;\n\n    for (let p in props.sorted) {\n      if (props.sorted[p].toggle) {\n        check = true;\n      }\n    }\n\n    updateShow(check);\n    let interval = null;\n    interval = setInterval(() => {\n      setSeconds(seconds => seconds + 1);\n    }, 500); // if(load===\"loaded\"){\n\n    setPad(document.querySelector(\".sortNav\").getBoundingClientRect().height);\n    document.documentElement.style.backgroundColor = props.style.body; // }\n\n    return () => clearInterval(interval);\n  }, [props.style, props.sorted, seconds]);\n  let appStyle = {\n    backgroundColor: props.style.body\n  };\n  let wrapStyle = {\n    color: props.style.bodyText,\n    backgroundColor: props.style.body,\n    paddingTop: show ? \"\" + pad + \"px\" : \"0\"\n  };\n  return React.createElement(\"div\", {\n    className: \"App\",\n    style: appStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, load === \"loaded\" && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Nav, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), \" \", React.createElement(SortNav, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), \" \", React.createElement(Options, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), \" \", React.createElement(StyleOptions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), \" \", React.createElement(\"div\", {\n    className: \"mainWrapper\",\n    style: wrapStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: \"/\",\n    component: List,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }))), React.createElement(Route, {\n    path: \"/:id\",\n    component: CardPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })), load === \"load\" && React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faSpinner,\n    spin: true,\n    size: \"lg\",\n    style: {\n      color: props.style.bodyText\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  })));\n}\n\nconst mapStateToProps = state => {\n  return {\n    style: state.style,\n    sorted: state.sorted\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setCards: crds => {\n      dispatch(setCards(crds));\n    },\n    setFormats: fmts => {\n      dispatch(setFormats(fmts));\n    },\n    setSets: sts => {\n      dispatch(setSets(sts));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/App.js"],"names":["React","List","CardPage","Nav","Options","SortNav","StyleOptions","FontAwesomeIcon","faSpinner","faExclamationCircle","connect","setCards","setFormats","setSets","Switch","Route","App","props","useState","show","updateShow","seconds","setSeconds","pad","setPad","loadCard","setLoadCards","loadFormat","setLoadFormat","loadSet","setLoadSet","load","setLoad","useEffect","localStorage","setItem","JSON","stringify","style","fetch","then","response","json","data","catch","check","p","sorted","toggle","interval","setInterval","document","querySelector","getBoundingClientRect","height","documentElement","backgroundColor","body","clearInterval","appStyle","wrapStyle","color","bodyText","paddingTop","mapStateToProps","state","mapDispatchToProps","dispatch","crds","fmts","sts"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './less/style.css';\nimport List from './components/main/List';\nimport CardPage from './components/card/CardPage'\nimport Nav from './components/nav/Navigation';\nimport Options from './components/nav/options';\nimport SortNav from './components/nav/SortNav'\nimport StyleOptions from './components/nav/StyleOptions';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faSpinner, faExclamationCircle} from '@fortawesome/free-solid-svg-icons';\n\nimport {connect} from 'react-redux';\nimport {setCards, setFormats, setSets} from \"./redux/actions/setActions\";\n\nimport {\n    Switch,\n    Route\n} from \"react-router-dom\";\n\n\n\nfunction App(props) {\n\n    const [show, updateShow] = React.useState(false);\n    const [seconds, setSeconds] = React.useState(0);\n    const [pad, setPad] = React.useState(60);\n    const [loadCard, setLoadCards] = React.useState(\"load\");\n    const [loadFormat, setLoadFormat] = React.useState(\"load\");\n    const [loadSet, setLoadSet] = React.useState(\"load\");\n    const [load, setLoad] =React.useState(\"load\");\n\n\n    React.useEffect(() => {\n        localStorage.setItem('localStyle', JSON.stringify(props.style));\n        fetch(\"https://swdestinydb.com/api/public/cards/\")\n            .then(response => {\n                return response.json();\n            })\n            .then((data) => {\n                setLoadCards(\"loaded\");\n                props.setCards(data);\n            }).catch(function () {\n            setLoadCards(\"error\");\n        });\n        fetch(\"https://swdestinydb.com/api/public/formats/\")\n            .then(response => {\n                return response.json();\n            })\n            .then((data) => {\n                setLoadFormat(\"loaded\");\n                props.setFormats(data);\n            }).catch(function () {\n            setLoadFormat(\"error\");\n        });\n        //\n        fetch(\"https://swdestinydb.com/api/public/sets/\")\n            .then(response => {\n                return response.json();\n            })\n            .then((data) => {\n                setLoadSet(\"loaded\");\n                props.setSets(data);\n            }).catch(function () {\n            setLoadSet(\"error\");\n        });\n\n        if(loadCard===\"loaded\"&&loadFormat===\"loaded\"&&loadSet===\"loaded\"){\n            setLoad(\"loaded\")\n        }else if(loadCard===\"error\"||loadFormat===\"error\"||loadSet===\"error\"){\n            setLoad(\"error\");\n        }\n\n        let check = false;\n\n        for (let p in props.sorted) {\n            if (props.sorted[p].toggle) {\n                check = true;\n            }\n        }\n\n        updateShow(check);\n\n        let interval = null;\n\n        interval = setInterval(() => {\n            setSeconds(seconds => seconds + 1);\n        }, 500);\n\n        // if(load===\"loaded\"){\n            setPad(document.querySelector(\".sortNav\").getBoundingClientRect().height);\n\n            document.documentElement.style.backgroundColor = props.style.body;\n        // }\n\n\n        return () => clearInterval(interval);\n\n    }, [props.style, props.sorted, seconds]);\n\n    let appStyle = {\n        backgroundColor: props.style.body\n    };\n\n    let wrapStyle = {\n        color: props.style.bodyText,\n        backgroundColor: props.style.body,\n        paddingTop: (show ? \"\" + pad + \"px\" : \"0\")\n    };\n\n    return (\n\n        <div className=\"App\" style={appStyle}>\n            {load===\"loaded\"&&<span><Nav/> <SortNav/> <Options/> <StyleOptions/> <div className={\"mainWrapper\"} style={wrapStyle}><Switch><Route path=\"/\" component={List}/></Switch></div><Route path={\"/:id\"} component={CardPage}/></span>}\n            {load===\"load\"&&<div style={{height:\"100%\"}}><FontAwesomeIcon icon={faSpinner} spin size={\"lg\"} style={{color:props.style.bodyText}}/></div>}\n            {/*<Nav/>*/}\n            {/*<SortNav/>*/}\n            {/*<Options/>*/}\n            {/*<StyleOptions/>*/}\n            {/*<div className={\"mainWrapper\"} style={wrapStyle}>*/}\n            {/*    <Switch>*/}\n            {/*        <Route path=\"/\" component={List}/>*/}\n            {/*    </Switch>*/}\n            {/*</div>*/}\n            {/*<Route path={\"/:id\"} component={CardPage}/>*/}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        style: state.style,\n        sorted: state.sorted\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setCards: (crds) => {\n            dispatch(setCards(crds))\n        },\n        setFormats: (fmts) => {\n            dispatch(setFormats(fmts))\n        },\n        setSets: (sts) => {\n            dispatch(setSets(sts))\n        },\n    }\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}
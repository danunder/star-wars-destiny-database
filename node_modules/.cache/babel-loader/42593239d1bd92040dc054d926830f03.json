{"ast":null,"code":"var _jsxFileName = \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/components/nav/OptionItem.js\";\nimport React from 'react';\nimport { setSort } from \"../../redux/actions/setActions\";\nimport { connect } from \"react-redux\";\n\nfunction OptionItem(props) {\n  let shower;\n\n  const toggleReturn = (prop, val) => {\n    return !(props.sorted[prop].toggle && props.sorted[prop].val === val);\n  };\n\n  const handleSort = (prop, val) => {\n    props.setSort(prop, toggleReturn(prop, val), val);\n  };\n\n  if (props.sorted[props.type].val === props.value && props.sorted[props.type].toggle) {\n    shower = {\n      \"backgroundColor\": \"#343740\"\n    };\n  }\n\n  const numberCheck = () => {\n    if (isNaN(props.value)) {\n      return props.value.charAt(0).toUpperCase() + props.value.substring(1);\n    } else {\n      return props.value;\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"item\",\n    style: shower,\n    onClick: () => handleSort(props.type, props.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, numberCheck());\n}\n\nconst mapStateToProps = state => {\n  return {\n    sorted: state.sorted\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSort: (prop, toggle, val) => {\n      dispatch(setSort(prop, toggle, val));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OptionItem);","map":{"version":3,"sources":["/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/components/nav/OptionItem.js"],"names":["React","setSort","connect","OptionItem","props","shower","toggleReturn","prop","val","sorted","toggle","handleSort","type","value","numberCheck","isNaN","charAt","toUpperCase","substring","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,gCAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAEvB,MAAIC,MAAJ;;AAEA,QAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,GAAP,KAAe;AAChC,WAAO,EAAEJ,KAAK,CAACK,MAAN,CAAaF,IAAb,EAAmBG,MAAnB,IAA6BN,KAAK,CAACK,MAAN,CAAaF,IAAb,EAAmBC,GAAnB,KAA2BA,GAA1D,CAAP;AACH,GAFD;;AAIA,QAAMG,UAAU,GAAG,CAACJ,IAAD,EAAOC,GAAP,KAAe;AAC9BJ,IAAAA,KAAK,CAACH,OAAN,CAAcM,IAAd,EAAoBD,YAAY,CAACC,IAAD,EAAOC,GAAP,CAAhC,EAA6CA,GAA7C;AACH,GAFD;;AAIA,MAAIJ,KAAK,CAACK,MAAN,CAAaL,KAAK,CAACQ,IAAnB,EAAyBJ,GAAzB,KAAiCJ,KAAK,CAACS,KAAvC,IAAgDT,KAAK,CAACK,MAAN,CAAaL,KAAK,CAACQ,IAAnB,EAAyBF,MAA7E,EAAqF;AACjFL,IAAAA,MAAM,GAAG;AACL,yBAAmB;AADd,KAAT;AAGH;;AAED,QAAMS,WAAW,GAAG,MAAM;AACtB,QAAIC,KAAK,CAACX,KAAK,CAACS,KAAP,CAAT,EAAwB;AACpB,aAAOT,KAAK,CAACS,KAAN,CAAYG,MAAZ,CAAmB,CAAnB,EAAsBC,WAAtB,KAAsCb,KAAK,CAACS,KAAN,CAAYK,SAAZ,CAAsB,CAAtB,CAA7C;AACH,KAFD,MAEO;AACH,aAAOd,KAAK,CAACS,KAAb;AACH;AACJ,GAND;;AASA,SACI;AAAK,IAAA,SAAS,EAAE,MAAhB;AAAwB,IAAA,KAAK,EAAER,MAA/B;AAAuC,IAAA,OAAO,EAAE,MAAMM,UAAU,CAACP,KAAK,CAACQ,IAAP,EAAaR,KAAK,CAACS,KAAnB,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4FC,WAAW,EAAvG,CADJ;AAIH;;AAED,MAAMK,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHX,IAAAA,MAAM,EAAEW,KAAK,CAACX;AADX,GAAP;AAGH,CAJD;;AAMA,MAAMY,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHrB,IAAAA,OAAO,EAAE,CAACM,IAAD,EAAOG,MAAP,EAAeF,GAAf,KAAuB;AAC5Bc,MAAAA,QAAQ,CAACrB,OAAO,CAACM,IAAD,EAAOG,MAAP,EAAeF,GAAf,CAAR,CAAR;AACH;AAHE,GAAP;AAKH,CAND;;AASA,eAAeN,OAAO,CAACiB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ClB,UAA7C,CAAf","sourcesContent":["import React from 'react';\nimport {setSort} from \"../../redux/actions/setActions\";\nimport {connect} from \"react-redux\";\n\nfunction OptionItem(props) {\n\n    let shower;\n\n    const toggleReturn = (prop, val) => {\n        return !(props.sorted[prop].toggle && props.sorted[prop].val === val);\n    };\n\n    const handleSort = (prop, val) => {\n        props.setSort(prop, toggleReturn(prop, val), val)\n    };\n\n    if (props.sorted[props.type].val === props.value && props.sorted[props.type].toggle) {\n        shower = {\n            \"backgroundColor\": \"#343740\"\n        }\n    }\n\n    const numberCheck = () => {\n        if (isNaN(props.value)) {\n            return props.value.charAt(0).toUpperCase() + props.value.substring(1)\n        } else {\n            return props.value\n        }\n    };\n\n\n    return (\n        <div className={\"item\"} style={shower} onClick={() => handleSort(props.type, props.value)}>{numberCheck()}</div>\n    );\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        sorted: state.sorted\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setSort: (prop, toggle, val) => {\n            dispatch(setSort(prop, toggle, val))\n        }\n    }\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OptionItem);"]},"metadata":{},"sourceType":"module"}
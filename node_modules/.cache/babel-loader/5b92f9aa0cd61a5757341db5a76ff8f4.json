{"ast":null,"code":"import _slicedToArray from \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/components/nav/StyleOption.js\";\nimport React from 'react';\nimport { setStyles } from \"../../redux/actions/setActions\";\nimport { connect } from \"react-redux\";\n\nfunction StyleOption(props) {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        hover = _React$useState2[0],\n        setHover = _React$useState2[1];\n\n  const hoverChange = () => {\n    setHover(!hover);\n  };\n\n  let active;\n\n  if (hover) {\n    if (props.style.navText === undefined) {\n      active = {\n        backgroundColor: '#343740',\n        color: 'white'\n      };\n    } else {\n      active = {\n        backgroundColor: props.style.bodyText,\n        color: props.style.navText\n      };\n    }\n  } else {\n    if (props.opt.name === props.style.name) {\n      active = {\n        backgroundColor: props.style.navText,\n        color: props.style.nav\n      };\n    } else {\n      active = {\n        backgroundColor: props.style.nav,\n        color: props.style.navText\n      };\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: \"item\",\n    style: active,\n    onClick: () => props.setStyles(props.opt),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, props.opt.name);\n}\n\nconst mapStateToProps = state => {\n  return {\n    style: state.style\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setStyles: style => {\n      dispatch(setStyles(style));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StyleOption);","map":{"version":3,"sources":["/Users/LMJ62894/WebstormProjects/star-wars-destiny-database/src/components/nav/StyleOption.js"],"names":["React","setStyles","connect","StyleOption","props","useState","hover","setHover","hoverChange","active","style","navText","undefined","backgroundColor","color","bodyText","opt","name","nav","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,gCAAxB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA,0BAEEJ,KAAK,CAACK,QAAN,CAAe,KAAf,CAFF;AAAA;AAAA,QAEjBC,KAFiB;AAAA,QAEVC,QAFU;;AAIxB,QAAMC,WAAW,GAAG,MAAI;AACpBD,IAAAA,QAAQ,CAAC,CAACD,KAAF,CAAR;AACH,GAFD;;AAIA,MAAIG,MAAJ;;AAEA,MAAGH,KAAH,EAAS;AACL,QAAGF,KAAK,CAACM,KAAN,CAAYC,OAAZ,KAAsBC,SAAzB,EAAmC;AAC/BH,MAAAA,MAAM,GAAG;AACLI,QAAAA,eAAe,EAAE,SADZ;AAELC,QAAAA,KAAK,EAAC;AAFD,OAAT;AAIH,KALD,MAKK;AACDL,MAAAA,MAAM,GAAG;AACLI,QAAAA,eAAe,EAAET,KAAK,CAACM,KAAN,CAAYK,QADxB;AAELD,QAAAA,KAAK,EAACV,KAAK,CAACM,KAAN,CAAYC;AAFb,OAAT;AAIH;AACJ,GAZD,MAYK;AACD,QAAGP,KAAK,CAACY,GAAN,CAAUC,IAAV,KAAiBb,KAAK,CAACM,KAAN,CAAYO,IAAhC,EAAqC;AACjCR,MAAAA,MAAM,GAAC;AACHI,QAAAA,eAAe,EAACT,KAAK,CAACM,KAAN,CAAYC,OADzB;AAEHG,QAAAA,KAAK,EAACV,KAAK,CAACM,KAAN,CAAYQ;AAFf,OAAP;AAIH,KALD,MAKK;AACDT,MAAAA,MAAM,GAAC;AACHI,QAAAA,eAAe,EAACT,KAAK,CAACM,KAAN,CAAYQ,GADzB;AAEHJ,QAAAA,KAAK,EAACV,KAAK,CAACM,KAAN,CAAYC;AAFf,OAAP;AAIH;AACJ;;AAMD,SAEI;AAAK,IAAA,SAAS,EAAE,MAAhB;AAAwB,IAAA,KAAK,EAAEF,MAA/B;AAAuC,IAAA,OAAO,EAAE,MAAML,KAAK,CAACH,SAAN,CAAgBG,KAAK,CAACY,GAAtB,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmFZ,KAAK,CAACY,GAAN,CAAUC,IAA7F,CAFJ;AAKH;;AAED,MAAME,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHV,IAAAA,KAAK,EAAEU,KAAK,CAACV;AADV,GAAP;AAGH,CAJD;;AAMA,MAAMW,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHrB,IAAAA,SAAS,EAAGS,KAAD,IAAW;AAClBY,MAAAA,QAAQ,CAACrB,SAAS,CAACS,KAAD,CAAV,CAAR;AACH;AAHE,GAAP;AAKH,CAND;;AAQA,eAAeR,OAAO,CAACiB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ClB,WAA7C,CAAf","sourcesContent":["import React from 'react';\nimport {setStyles} from \"../../redux/actions/setActions\";\nimport {connect} from \"react-redux\";\n\nfunction StyleOption(props) {\n\n    const [hover, setHover] = React.useState(false)\n\n    const hoverChange = ()=>{\n        setHover(!hover)\n    };\n\n    let active;\n\n    if(hover){\n        if(props.style.navText===undefined){\n            active = {\n                backgroundColor: '#343740',\n                color:'white'\n            }\n        }else{\n            active = {\n                backgroundColor: props.style.bodyText,\n                color:props.style.navText\n            }\n        }\n    }else{\n        if(props.opt.name===props.style.name){\n            active={\n                backgroundColor:props.style.navText,\n                color:props.style.nav\n            }\n        }else{\n            active={\n                backgroundColor:props.style.nav,\n                color:props.style.navText\n            }\n        }\n    }\n\n\n\n\n\n    return (\n\n        <div className={\"item\"} style={active} onClick={() => props.setStyles(props.opt)}>{props.opt.name}</div>\n\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        style: state.style\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setStyles: (style) => {\n            dispatch(setStyles(style))\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StyleOption);"]},"metadata":{},"sourceType":"module"}